=begin comment

Nodeum API

The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Nodeum::SDK::TasksApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Nodeum::SDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Nodeum::SDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Nodeum::SDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_task
#
# Creates a new task.
# 
# @param Task $task_body  (required)
{
    my $params = {
    'task_body' => {
        data_type => 'Task',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_task' } = { 
        summary => 'Creates a new task.',
        params => $params,
        returns => 'Task',
        };
}
# @return Task
#
sub create_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_body' is set
    unless (exists $args{'task_body'}) {
      croak("Missing the required parameter 'task_body' when calling create_task");
    }

    # parse inputs
    my $_resource_path = '/tasks';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'task_body'}) {
        $_body_data = $args{'task_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Task', $response);
    return $_response_object;
}

#
# destroy_task
#
# Destroys a specific task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_task' } = { 
        summary => 'Destroys a specific task.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling destroy_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# index_tasks
#
# Lists all tasks.
# 
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $name Filter on name (optional)
# @param string $comment Filter on comment (optional)
# @param string $workflow_type Filter on task workflow type (optional)
# @param string $workflow_action Filter on task workflow action (optional)
# @param string $source_type Filter on task source type (optional)
# @param string $destination_type Filter on task destination type (optional)
# @param string $priority Filter on priority (optional)
# @param string $conflict_resolution Filter on conflict resolution (optional)
# @param string $action Filter on action (optional)
# @param string $activate Filter on activate (optional)
# @param string $creation_date Filter on creation date (optional)
# @param string $creation_username Filter on creation username (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $modification_username Filter on modification username (optional)
# @param string $job_started Filter on job started (optional)
# @param string $job_finished Filter on job finished (optional)
# @param string $status Filter on status (optional)
# @param string $processed_size Filter on processed size (optional)
# @param string $to_process_size Filter on to process size (optional)
# @param string $source_pool_id Filter on task source pool id (optional)
# @param string $source_pool_name Filter on task source pool name (optional)
# @param string $source_tape_id Filter on task source tape id (optional)
# @param string $source_tape_barcode Filter on task source tape barcode (optional)
# @param string $destination_pool_id Filter on task destination pool id (optional)
# @param string $destination_pool_name Filter on task destination pool name (optional)
# @param string $destination_tape_id Filter on task destination tape id (optional)
# @param string $destination_tape_barcode Filter on task destination tape barcode (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'comment' => {
        data_type => 'string',
        description => 'Filter on comment',
        required => '0',
    },
    'workflow_type' => {
        data_type => 'string',
        description => 'Filter on task workflow type',
        required => '0',
    },
    'workflow_action' => {
        data_type => 'string',
        description => 'Filter on task workflow action',
        required => '0',
    },
    'source_type' => {
        data_type => 'string',
        description => 'Filter on task source type',
        required => '0',
    },
    'destination_type' => {
        data_type => 'string',
        description => 'Filter on task destination type',
        required => '0',
    },
    'priority' => {
        data_type => 'string',
        description => 'Filter on priority',
        required => '0',
    },
    'conflict_resolution' => {
        data_type => 'string',
        description => 'Filter on conflict resolution',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => 'Filter on action',
        required => '0',
    },
    'activate' => {
        data_type => 'string',
        description => 'Filter on activate',
        required => '0',
    },
    'creation_date' => {
        data_type => 'string',
        description => 'Filter on creation date',
        required => '0',
    },
    'creation_username' => {
        data_type => 'string',
        description => 'Filter on creation username',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'modification_username' => {
        data_type => 'string',
        description => 'Filter on modification username',
        required => '0',
    },
    'job_started' => {
        data_type => 'string',
        description => 'Filter on job started',
        required => '0',
    },
    'job_finished' => {
        data_type => 'string',
        description => 'Filter on job finished',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Filter on status',
        required => '0',
    },
    'processed_size' => {
        data_type => 'string',
        description => 'Filter on processed size',
        required => '0',
    },
    'to_process_size' => {
        data_type => 'string',
        description => 'Filter on to process size',
        required => '0',
    },
    'source_pool_id' => {
        data_type => 'string',
        description => 'Filter on task source pool id',
        required => '0',
    },
    'source_pool_name' => {
        data_type => 'string',
        description => 'Filter on task source pool name',
        required => '0',
    },
    'source_tape_id' => {
        data_type => 'string',
        description => 'Filter on task source tape id',
        required => '0',
    },
    'source_tape_barcode' => {
        data_type => 'string',
        description => 'Filter on task source tape barcode',
        required => '0',
    },
    'destination_pool_id' => {
        data_type => 'string',
        description => 'Filter on task destination pool id',
        required => '0',
    },
    'destination_pool_name' => {
        data_type => 'string',
        description => 'Filter on task destination pool name',
        required => '0',
    },
    'destination_tape_id' => {
        data_type => 'string',
        description => 'Filter on task destination tape id',
        required => '0',
    },
    'destination_tape_barcode' => {
        data_type => 'string',
        description => 'Filter on task destination tape barcode',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tasks' } = { 
        summary => 'Lists all tasks.',
        params => $params,
        returns => 'TaskCollection',
        };
}
# @return TaskCollection
#
sub index_tasks {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tasks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'comment'}) {
        $query_params->{'comment'} = $self->{api_client}->to_query_value($args{'comment'});
    }

    # query params
    if ( exists $args{'workflow_type'}) {
        $query_params->{'workflow_type'} = $self->{api_client}->to_query_value($args{'workflow_type'});
    }

    # query params
    if ( exists $args{'workflow_action'}) {
        $query_params->{'workflow_action'} = $self->{api_client}->to_query_value($args{'workflow_action'});
    }

    # query params
    if ( exists $args{'source_type'}) {
        $query_params->{'source_type'} = $self->{api_client}->to_query_value($args{'source_type'});
    }

    # query params
    if ( exists $args{'destination_type'}) {
        $query_params->{'destination_type'} = $self->{api_client}->to_query_value($args{'destination_type'});
    }

    # query params
    if ( exists $args{'priority'}) {
        $query_params->{'priority'} = $self->{api_client}->to_query_value($args{'priority'});
    }

    # query params
    if ( exists $args{'conflict_resolution'}) {
        $query_params->{'conflict_resolution'} = $self->{api_client}->to_query_value($args{'conflict_resolution'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'activate'}) {
        $query_params->{'activate'} = $self->{api_client}->to_query_value($args{'activate'});
    }

    # query params
    if ( exists $args{'creation_date'}) {
        $query_params->{'creation_date'} = $self->{api_client}->to_query_value($args{'creation_date'});
    }

    # query params
    if ( exists $args{'creation_username'}) {
        $query_params->{'creation_username'} = $self->{api_client}->to_query_value($args{'creation_username'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'modification_username'}) {
        $query_params->{'modification_username'} = $self->{api_client}->to_query_value($args{'modification_username'});
    }

    # query params
    if ( exists $args{'job_started'}) {
        $query_params->{'job_started'} = $self->{api_client}->to_query_value($args{'job_started'});
    }

    # query params
    if ( exists $args{'job_finished'}) {
        $query_params->{'job_finished'} = $self->{api_client}->to_query_value($args{'job_finished'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'processed_size'}) {
        $query_params->{'processed_size'} = $self->{api_client}->to_query_value($args{'processed_size'});
    }

    # query params
    if ( exists $args{'to_process_size'}) {
        $query_params->{'to_process_size'} = $self->{api_client}->to_query_value($args{'to_process_size'});
    }

    # query params
    if ( exists $args{'source_pool_id'}) {
        $query_params->{'source_pool_id'} = $self->{api_client}->to_query_value($args{'source_pool_id'});
    }

    # query params
    if ( exists $args{'source_pool_name'}) {
        $query_params->{'source_pool_name'} = $self->{api_client}->to_query_value($args{'source_pool_name'});
    }

    # query params
    if ( exists $args{'source_tape_id'}) {
        $query_params->{'source_tape_id'} = $self->{api_client}->to_query_value($args{'source_tape_id'});
    }

    # query params
    if ( exists $args{'source_tape_barcode'}) {
        $query_params->{'source_tape_barcode'} = $self->{api_client}->to_query_value($args{'source_tape_barcode'});
    }

    # query params
    if ( exists $args{'destination_pool_id'}) {
        $query_params->{'destination_pool_id'} = $self->{api_client}->to_query_value($args{'destination_pool_id'});
    }

    # query params
    if ( exists $args{'destination_pool_name'}) {
        $query_params->{'destination_pool_name'} = $self->{api_client}->to_query_value($args{'destination_pool_name'});
    }

    # query params
    if ( exists $args{'destination_tape_id'}) {
        $query_params->{'destination_tape_id'} = $self->{api_client}->to_query_value($args{'destination_tape_id'});
    }

    # query params
    if ( exists $args{'destination_tape_barcode'}) {
        $query_params->{'destination_tape_barcode'} = $self->{api_client}->to_query_value($args{'destination_tape_barcode'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskCollection', $response);
    return $_response_object;
}

#
# pause_task
#
# Pause a task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pause_task' } = { 
        summary => 'Pause a task.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub pause_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling pause_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/action/pause';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# pause_task_result
#
# Check result of a task pause request.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $job_id ID of active job (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => 'ID of active job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pause_task_result' } = { 
        summary => 'Check result of a task pause request.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub pause_task_result {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling pause_task_result");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling pause_task_result");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/action/pause';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'job_id'}) {
        $query_params->{'job_id'} = $self->{api_client}->to_query_value($args{'job_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# resume_task
#
# Resume a task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'resume_task' } = { 
        summary => 'Resume a task.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub resume_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling resume_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/action/resume';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# resume_task_result
#
# Check result of a task resume request.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $job_id ID of active job (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => 'ID of active job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'resume_task_result' } = { 
        summary => 'Check result of a task resume request.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub resume_task_result {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling resume_task_result");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling resume_task_result");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/action/resume';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'job_id'}) {
        $query_params->{'job_id'} = $self->{api_client}->to_query_value($args{'job_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# run_task
#
# Run a task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'run_task' } = { 
        summary => 'Run a task.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub run_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling run_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/action/run';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# run_task_result
#
# Check result of a task run request.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $job_id ID of active job (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => 'ID of active job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'run_task_result' } = { 
        summary => 'Check result of a task run request.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub run_task_result {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling run_task_result");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling run_task_result");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/action/run';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'job_id'}) {
        $query_params->{'job_id'} = $self->{api_client}->to_query_value($args{'job_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# show_task
#
# Displays a specific task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_task' } = { 
        summary => 'Displays a specific task.',
        params => $params,
        returns => 'Task',
        };
}
# @return Task
#
sub show_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling show_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Task', $response);
    return $_response_object;
}

#
# stop_task
#
# Stop a task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stop_task' } = { 
        summary => 'Stop a task.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub stop_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling stop_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/action/stop';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# stop_task_result
#
# Check result of a task stop request.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $job_id ID of active job (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => 'ID of active job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stop_task_result' } = { 
        summary => 'Check result of a task stop request.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub stop_task_result {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling stop_task_result");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling stop_task_result");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/action/stop';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'job_id'}) {
        $query_params->{'job_id'} = $self->{api_client}->to_query_value($args{'job_id'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# update_task
#
# Updates a specific task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param Task $task_body  (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'task_body' => {
        data_type => 'Task',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_task' } = { 
        summary => 'Updates a specific task.',
        params => $params,
        returns => 'Task',
        };
}
# @return Task
#
sub update_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling update_task");
    }

    # verify the required parameter 'task_body' is set
    unless (exists $args{'task_body'}) {
      croak("Missing the required parameter 'task_body' when calling update_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'task_body'}) {
        $_body_data = $args{'task_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Task', $response);
    return $_response_object;
}

1;
