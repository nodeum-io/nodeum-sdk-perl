=begin comment

Nodeum API

The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Nodeum::SDK::StatisticsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Nodeum::SDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Nodeum::SDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Nodeum::SDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# statistics_by_date
#
# Get statistics about files, grouped by date
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_date' } = { 
        summary => 'Get statistics about files, grouped by date',
        params => $params,
        returns => 'ByDateFacet',
        };
}
# @return ByDateFacet
#
sub statistics_by_date {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_date';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByDateFacet', $response);
    return $_response_object;
}

#
# statistics_by_file_extension
#
# Get statistics about files, grouped by file extension
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_file_extension' } = { 
        summary => 'Get statistics about files, grouped by file extension',
        params => $params,
        returns => 'ByFileExtensionFacet',
        };
}
# @return ByFileExtensionFacet
#
sub statistics_by_file_extension {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_file_extension';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByFileExtensionFacet', $response);
    return $_response_object;
}

#
# statistics_by_group_owner
#
# Get statistics about files, grouped by owner (group)
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_group_owner' } = { 
        summary => 'Get statistics about files, grouped by owner (group)',
        params => $params,
        returns => 'ByGroupOwnerFacet',
        };
}
# @return ByGroupOwnerFacet
#
sub statistics_by_group_owner {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_group_owner';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByGroupOwnerFacet', $response);
    return $_response_object;
}

#
# statistics_by_metadata
#
# Get statistics about files, grouped by metadata
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_metadata' } = { 
        summary => 'Get statistics about files, grouped by metadata',
        params => $params,
        returns => 'ByMetadataFacet',
        };
}
# @return ByMetadataFacet
#
sub statistics_by_metadata {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_metadata';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByMetadataFacet', $response);
    return $_response_object;
}

#
# statistics_by_primary_cloud
#
# Get statistics about files, grouped by primary Cloud
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_primary_cloud' } = { 
        summary => 'Get statistics about files, grouped by primary Cloud',
        params => $params,
        returns => 'ByPrimaryCloudFacet',
        };
}
# @return ByPrimaryCloudFacet
#
sub statistics_by_primary_cloud {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_primary_cloud';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByPrimaryCloudFacet', $response);
    return $_response_object;
}

#
# statistics_by_primary_name
#
# Get statistics about files, grouped by primary storages
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_primary_name' } = { 
        summary => 'Get statistics about files, grouped by primary storages',
        params => $params,
        returns => 'ByPrimaryFacet',
        };
}
# @return ByPrimaryFacet
#
sub statistics_by_primary_name {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_primary_name';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByPrimaryFacet', $response);
    return $_response_object;
}

#
# statistics_by_primary_nas
#
# Get statistics about files, grouped by primary NAS
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_primary_nas' } = { 
        summary => 'Get statistics about files, grouped by primary NAS',
        params => $params,
        returns => 'ByPrimaryNasFacet',
        };
}
# @return ByPrimaryNasFacet
#
sub statistics_by_primary_nas {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_primary_nas';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByPrimaryNasFacet', $response);
    return $_response_object;
}

#
# statistics_by_primary_storage
#
# Get statistics about files, grouped by primary storage
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_primary_storage' } = { 
        summary => 'Get statistics about files, grouped by primary storage',
        params => $params,
        returns => 'ByPrimaryStorageFacet',
        };
}
# @return ByPrimaryStorageFacet
#
sub statistics_by_primary_storage {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_primary_storage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByPrimaryStorageFacet', $response);
    return $_response_object;
}

#
# statistics_by_secondary_cloud
#
# Get statistics about files, grouped by secondary Cloud
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_secondary_cloud' } = { 
        summary => 'Get statistics about files, grouped by secondary Cloud',
        params => $params,
        returns => 'BySecondaryCloudFacet',
        };
}
# @return BySecondaryCloudFacet
#
sub statistics_by_secondary_cloud {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_secondary_cloud';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BySecondaryCloudFacet', $response);
    return $_response_object;
}

#
# statistics_by_secondary_nas
#
# Get statistics about files, grouped by secondary NAS
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_secondary_nas' } = { 
        summary => 'Get statistics about files, grouped by secondary NAS',
        params => $params,
        returns => 'BySecondaryNasFacet',
        };
}
# @return BySecondaryNasFacet
#
sub statistics_by_secondary_nas {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_secondary_nas';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BySecondaryNasFacet', $response);
    return $_response_object;
}

#
# statistics_by_secondary_storage
#
# Get statistics about files, grouped by secondary storage
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_secondary_storage' } = { 
        summary => 'Get statistics about files, grouped by secondary storage',
        params => $params,
        returns => 'BySecondaryStorageFacet',
        };
}
# @return BySecondaryStorageFacet
#
sub statistics_by_secondary_storage {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_secondary_storage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BySecondaryStorageFacet', $response);
    return $_response_object;
}

#
# statistics_by_secondary_tape
#
# Get statistics about files, grouped by secondary Tape
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_secondary_tape' } = { 
        summary => 'Get statistics about files, grouped by secondary Tape',
        params => $params,
        returns => 'BySecondaryTapeFacet',
        };
}
# @return BySecondaryTapeFacet
#
sub statistics_by_secondary_tape {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_secondary_tape';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BySecondaryTapeFacet', $response);
    return $_response_object;
}

#
# statistics_by_size
#
# Get statistics about files, grouped by size
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_size' } = { 
        summary => 'Get statistics about files, grouped by size',
        params => $params,
        returns => 'BySizeFacet',
        };
}
# @return BySizeFacet
#
sub statistics_by_size {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_size';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BySizeFacet', $response);
    return $_response_object;
}

#
# statistics_by_user_owner
#
# Get statistics about files, grouped by owner (user)
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $date_attr Type of date to facet on (optional)
# @param string $sort Sort results of facet (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'date_attr' => {
        data_type => 'string',
        description => 'Type of date to facet on',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_by_user_owner' } = { 
        summary => 'Get statistics about files, grouped by owner (user)',
        params => $params,
        returns => 'ByUserOwnerFacet',
        };
}
# @return ByUserOwnerFacet
#
sub statistics_by_user_owner {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/by_user_owner';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'date_attr'}) {
        $query_params->{'date_attr'} = $self->{api_client}->to_query_value($args{'date_attr'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByUserOwnerFacet', $response);
    return $_response_object;
}

#
# statistics_storage
#
# Get statistics about storages, grouped by types
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_storage' } = { 
        summary => 'Get statistics about storages, grouped by types',
        params => $params,
        returns => 'StorageFacet',
        };
}
# @return StorageFacet
#
sub statistics_storage {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/storage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('StorageFacet', $response);
    return $_response_object;
}

#
# statistics_task_by_metadata
#
# Get statistics about tasks executions, grouped by metadata
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
# @param string $sort Sort results of facet on task (optional, default to 'count')
# @param int $limit Limit results of facet (optional, default to 10)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort results of facet on task',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit results of facet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_task_by_metadata' } = { 
        summary => 'Get statistics about tasks executions, grouped by metadata',
        params => $params,
        returns => 'ByTaskMetadataFacet',
        };
}
# @return ByTaskMetadataFacet
#
sub statistics_task_by_metadata {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/task_by_metadata';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByTaskMetadataFacet', $response);
    return $_response_object;
}

#
# statistics_task_by_status
#
# Get statistics about tasks executions, grouped by status
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_task_by_status' } = { 
        summary => 'Get statistics about tasks executions, grouped by status',
        params => $params,
        returns => 'ByTaskStatusFacet',
        };
}
# @return ByTaskStatusFacet
#
sub statistics_task_by_status {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/task_by_status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByTaskStatusFacet', $response);
    return $_response_object;
}

#
# statistics_task_by_storage
#
# Get statistics about tasks executions, grouped by source and destination
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_task_by_storage' } = { 
        summary => 'Get statistics about tasks executions, grouped by source and destination',
        params => $params,
        returns => 'ByTaskStorageFacet',
        };
}
# @return ByTaskStorageFacet
#
sub statistics_task_by_storage {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/task_by_storage';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByTaskStorageFacet', $response);
    return $_response_object;
}

#
# statistics_task_by_workflow
#
# Get statistics about tasks executions, grouped by workflow
# 
# @param string $q Solr query (optional)
# @param ARRAY[string] $fq Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Solr query',
        required => '0',
    },
    'fq' => {
        data_type => 'ARRAY[string]',
        description => 'Solr filter query  Multiple query can be separated by &#x60;|&#x60;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'statistics_task_by_workflow' } = { 
        summary => 'Get statistics about tasks executions, grouped by workflow',
        params => $params,
        returns => 'ByTaskWorkflowFacet',
        };
}
# @return ByTaskWorkflowFacet
#
sub statistics_task_by_workflow {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/statistics/task_by_workflow';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'fq'}) {
        $query_params->{'fq'} = $self->{api_client}->to_query_value($args{'fq'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ByTaskWorkflowFacet', $response);
    return $_response_object;
}

1;
