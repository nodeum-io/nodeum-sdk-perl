=begin comment

Nodeum API

The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Nodeum::SDK::NasSharesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Nodeum::SDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Nodeum::SDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Nodeum::SDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_nas_share_by_nas
#
# Creates a new NAS share.
# 
# @param string $nas_id Numeric ID or name of NAS. (required)
# @param NasShare $nas_share_body  (required)
{
    my $params = {
    'nas_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS.',
        required => '1',
    },
    'nas_share_body' => {
        data_type => 'NasShare',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_nas_share_by_nas' } = { 
        summary => 'Creates a new NAS share.',
        params => $params,
        returns => 'NasShare',
        };
}
# @return NasShare
#
sub create_nas_share_by_nas {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_id' is set
    unless (exists $args{'nas_id'}) {
      croak("Missing the required parameter 'nas_id' when calling create_nas_share_by_nas");
    }

    # verify the required parameter 'nas_share_body' is set
    unless (exists $args{'nas_share_body'}) {
      croak("Missing the required parameter 'nas_share_body' when calling create_nas_share_by_nas");
    }

    # parse inputs
    my $_resource_path = '/nas/{nas_id}/nas_shares';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'nas_id'}) {
        my $_base_variable = "{" . "nas_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'nas_share_body'}) {
        $_body_data = $args{'nas_share_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShare', $response);
    return $_response_object;
}

#
# destroy_nas_share
#
# Destroys a specific NAS share.
# 
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_nas_share' } = { 
        summary => 'Destroys a specific NAS share.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_nas_share {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling destroy_nas_share");
    }

    # parse inputs
    my $_resource_path = '/nas_shares/{nas_share_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# destroy_nas_share_by_nas
#
# Destroys a specific NAS share.
# 
# @param string $nas_id Numeric ID or name of NAS. (required)
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'nas_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS.',
        required => '1',
    },
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_nas_share_by_nas' } = { 
        summary => 'Destroys a specific NAS share.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_nas_share_by_nas {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_id' is set
    unless (exists $args{'nas_id'}) {
      croak("Missing the required parameter 'nas_id' when calling destroy_nas_share_by_nas");
    }

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling destroy_nas_share_by_nas");
    }

    # parse inputs
    my $_resource_path = '/nas/{nas_id}/nas_shares/{nas_share_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'nas_id'}) {
        my $_base_variable = "{" . "nas_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# destroy_nas_share_by_pool
#
# Destroys a specific NAS share.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_nas_share_by_pool' } = { 
        summary => 'Destroys a specific NAS share.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_nas_share_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling destroy_nas_share_by_pool");
    }

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling destroy_nas_share_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/nas_shares/{nas_share_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# index_nas_shares
#
# Lists all NAS shares.
# 
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $name Filter on name (optional)
# @param string $path Filter on path (optional)
# @param string $options Filter on options (optional)
# @param string $username Filter on username (optional)
# @param string $nas_id Filter on NAS id (optional)
# @param string $pool_id Filter on a pool id (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => 'Filter on path',
        required => '0',
    },
    'options' => {
        data_type => 'string',
        description => 'Filter on options',
        required => '0',
    },
    'username' => {
        data_type => 'string',
        description => 'Filter on username',
        required => '0',
    },
    'nas_id' => {
        data_type => 'string',
        description => 'Filter on NAS id',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => 'Filter on a pool id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_nas_shares' } = { 
        summary => 'Lists all NAS shares.',
        params => $params,
        returns => 'NasShareCollection',
        };
}
# @return NasShareCollection
#
sub index_nas_shares {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/nas_shares';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'options'}) {
        $query_params->{'options'} = $self->{api_client}->to_query_value($args{'options'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'nas_id'}) {
        $query_params->{'nas_id'} = $self->{api_client}->to_query_value($args{'nas_id'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'pool_id'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShareCollection', $response);
    return $_response_object;
}

#
# index_nas_shares_by_nas
#
# Lists all NAS shares.
# 
# @param string $nas_id Numeric ID or name of NAS. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $name Filter on name (optional)
# @param string $path Filter on path (optional)
# @param string $options Filter on options (optional)
# @param string $username Filter on username (optional)
# @param string $pool_id Filter on a pool id (optional)
{
    my $params = {
    'nas_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => 'Filter on path',
        required => '0',
    },
    'options' => {
        data_type => 'string',
        description => 'Filter on options',
        required => '0',
    },
    'username' => {
        data_type => 'string',
        description => 'Filter on username',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => 'Filter on a pool id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_nas_shares_by_nas' } = { 
        summary => 'Lists all NAS shares.',
        params => $params,
        returns => 'NasShareCollection',
        };
}
# @return NasShareCollection
#
sub index_nas_shares_by_nas {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_id' is set
    unless (exists $args{'nas_id'}) {
      croak("Missing the required parameter 'nas_id' when calling index_nas_shares_by_nas");
    }

    # parse inputs
    my $_resource_path = '/nas/{nas_id}/nas_shares';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'options'}) {
        $query_params->{'options'} = $self->{api_client}->to_query_value($args{'options'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'pool_id'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    # path params
    if ( exists $args{'nas_id'}) {
        my $_base_variable = "{" . "nas_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShareCollection', $response);
    return $_response_object;
}

#
# index_nas_shares_by_pool
#
# Lists all NAS shares from pool.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $name Filter on name (optional)
# @param string $path Filter on path (optional)
# @param string $options Filter on options (optional)
# @param string $username Filter on username (optional)
# @param string $nas_id Filter on NAS id (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'path' => {
        data_type => 'string',
        description => 'Filter on path',
        required => '0',
    },
    'options' => {
        data_type => 'string',
        description => 'Filter on options',
        required => '0',
    },
    'username' => {
        data_type => 'string',
        description => 'Filter on username',
        required => '0',
    },
    'nas_id' => {
        data_type => 'string',
        description => 'Filter on NAS id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_nas_shares_by_pool' } = { 
        summary => 'Lists all NAS shares from pool.',
        params => $params,
        returns => 'NasShareCollection',
        };
}
# @return NasShareCollection
#
sub index_nas_shares_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling index_nas_shares_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/nas_shares';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    # query params
    if ( exists $args{'options'}) {
        $query_params->{'options'} = $self->{api_client}->to_query_value($args{'options'});
    }

    # query params
    if ( exists $args{'username'}) {
        $query_params->{'username'} = $self->{api_client}->to_query_value($args{'username'});
    }

    # query params
    if ( exists $args{'nas_id'}) {
        $query_params->{'nas_id'} = $self->{api_client}->to_query_value($args{'nas_id'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShareCollection', $response);
    return $_response_object;
}

#
# mount_status_nas_share
#
# Get mount status of NAS Share.
# 
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_nas_share' } = { 
        summary => 'Get mount status of NAS Share.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_nas_share {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling mount_status_nas_share");
    }

    # parse inputs
    my $_resource_path = '/nas_shares/{nas_share_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# mount_status_nas_share_by_nas
#
# Get mount status of NAS Share.
# 
# @param string $nas_id Numeric ID or name of NAS. (required)
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'nas_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS.',
        required => '1',
    },
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_nas_share_by_nas' } = { 
        summary => 'Get mount status of NAS Share.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_nas_share_by_nas {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_id' is set
    unless (exists $args{'nas_id'}) {
      croak("Missing the required parameter 'nas_id' when calling mount_status_nas_share_by_nas");
    }

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling mount_status_nas_share_by_nas");
    }

    # parse inputs
    my $_resource_path = '/nas/{nas_id}/nas_shares/{nas_share_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'nas_id'}) {
        my $_base_variable = "{" . "nas_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# mount_status_nas_share_by_pool
#
# Get mount status of NAS Share.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_nas_share_by_pool' } = { 
        summary => 'Get mount status of NAS Share.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_nas_share_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling mount_status_nas_share_by_pool");
    }

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling mount_status_nas_share_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/nas_shares/{nas_share_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# show_nas_share
#
# Displays a specific NAS share.
# 
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_nas_share' } = { 
        summary => 'Displays a specific NAS share.',
        params => $params,
        returns => 'NasShare',
        };
}
# @return NasShare
#
sub show_nas_share {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling show_nas_share");
    }

    # parse inputs
    my $_resource_path = '/nas_shares/{nas_share_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShare', $response);
    return $_response_object;
}

#
# show_nas_share_by_nas
#
# Displays a specific NAS share.
# 
# @param string $nas_id Numeric ID or name of NAS. (required)
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'nas_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS.',
        required => '1',
    },
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_nas_share_by_nas' } = { 
        summary => 'Displays a specific NAS share.',
        params => $params,
        returns => 'NasShare',
        };
}
# @return NasShare
#
sub show_nas_share_by_nas {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_id' is set
    unless (exists $args{'nas_id'}) {
      croak("Missing the required parameter 'nas_id' when calling show_nas_share_by_nas");
    }

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling show_nas_share_by_nas");
    }

    # parse inputs
    my $_resource_path = '/nas/{nas_id}/nas_shares/{nas_share_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'nas_id'}) {
        my $_base_variable = "{" . "nas_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShare', $response);
    return $_response_object;
}

#
# show_nas_share_by_pool
#
# Displays a specific NAS share.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_nas_share_by_pool' } = { 
        summary => 'Displays a specific NAS share.',
        params => $params,
        returns => 'NasShare',
        };
}
# @return NasShare
#
sub show_nas_share_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling show_nas_share_by_pool");
    }

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling show_nas_share_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/nas_shares/{nas_share_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShare', $response);
    return $_response_object;
}

#
# test_nas_share
#
# Test an unsaved NAS Share.
# 
# @param string $nas_id Numeric ID or name of NAS. (required)
# @param NasShare $nas_share_body  (required)
{
    my $params = {
    'nas_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS.',
        required => '1',
    },
    'nas_share_body' => {
        data_type => 'NasShare',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_nas_share' } = { 
        summary => 'Test an unsaved NAS Share.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub test_nas_share {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_id' is set
    unless (exists $args{'nas_id'}) {
      croak("Missing the required parameter 'nas_id' when calling test_nas_share");
    }

    # verify the required parameter 'nas_share_body' is set
    unless (exists $args{'nas_share_body'}) {
      croak("Missing the required parameter 'nas_share_body' when calling test_nas_share");
    }

    # parse inputs
    my $_resource_path = '/nas/{nas_id}/nas_shares/-/test';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'nas_id'}) {
        my $_base_variable = "{" . "nas_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'nas_share_body'}) {
        $_body_data = $args{'nas_share_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# test_result_nas_share
#
# Check result of a NAS Share test job.
# 
# @param string $nas_id Numeric ID or name of NAS. (required)
# @param string $job_id ID of active job (required)
{
    my $params = {
    'nas_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS.',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => 'ID of active job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'test_result_nas_share' } = { 
        summary => 'Check result of a NAS Share test job.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub test_result_nas_share {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_id' is set
    unless (exists $args{'nas_id'}) {
      croak("Missing the required parameter 'nas_id' when calling test_result_nas_share");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling test_result_nas_share");
    }

    # parse inputs
    my $_resource_path = '/nas/{nas_id}/nas_shares/-/test';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'job_id'}) {
        $query_params->{'job_id'} = $self->{api_client}->to_query_value($args{'job_id'});
    }

    # path params
    if ( exists $args{'nas_id'}) {
        my $_base_variable = "{" . "nas_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# update_nas_share
#
# Updates a specific NAS share.
# 
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
# @param NasShare $nas_share_body  (required)
{
    my $params = {
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    'nas_share_body' => {
        data_type => 'NasShare',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_nas_share' } = { 
        summary => 'Updates a specific NAS share.',
        params => $params,
        returns => 'NasShare',
        };
}
# @return NasShare
#
sub update_nas_share {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling update_nas_share");
    }

    # verify the required parameter 'nas_share_body' is set
    unless (exists $args{'nas_share_body'}) {
      croak("Missing the required parameter 'nas_share_body' when calling update_nas_share");
    }

    # parse inputs
    my $_resource_path = '/nas_shares/{nas_share_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'nas_share_body'}) {
        $_body_data = $args{'nas_share_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShare', $response);
    return $_response_object;
}

#
# update_nas_share_by_nas
#
# Updates a specific NAS share.
# 
# @param string $nas_id Numeric ID or name of NAS. (required)
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
# @param NasShare $nas_share_body  (required)
{
    my $params = {
    'nas_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS.',
        required => '1',
    },
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    'nas_share_body' => {
        data_type => 'NasShare',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_nas_share_by_nas' } = { 
        summary => 'Updates a specific NAS share.',
        params => $params,
        returns => 'NasShare',
        };
}
# @return NasShare
#
sub update_nas_share_by_nas {
    my ($self, %args) = @_;

    # verify the required parameter 'nas_id' is set
    unless (exists $args{'nas_id'}) {
      croak("Missing the required parameter 'nas_id' when calling update_nas_share_by_nas");
    }

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling update_nas_share_by_nas");
    }

    # verify the required parameter 'nas_share_body' is set
    unless (exists $args{'nas_share_body'}) {
      croak("Missing the required parameter 'nas_share_body' when calling update_nas_share_by_nas");
    }

    # parse inputs
    my $_resource_path = '/nas/{nas_id}/nas_shares/{nas_share_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'nas_id'}) {
        my $_base_variable = "{" . "nas_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'nas_share_body'}) {
        $_body_data = $args{'nas_share_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShare', $response);
    return $_response_object;
}

#
# update_nas_share_by_pool
#
# Updates a specific NAS share.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $nas_share_id Numeric ID or name of NAS share. (required)
# @param NasShare $nas_share_body  (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'nas_share_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of NAS share.',
        required => '1',
    },
    'nas_share_body' => {
        data_type => 'NasShare',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_nas_share_by_pool' } = { 
        summary => 'Updates a specific NAS share.',
        params => $params,
        returns => 'NasShare',
        };
}
# @return NasShare
#
sub update_nas_share_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling update_nas_share_by_pool");
    }

    # verify the required parameter 'nas_share_id' is set
    unless (exists $args{'nas_share_id'}) {
      croak("Missing the required parameter 'nas_share_id' when calling update_nas_share_by_pool");
    }

    # verify the required parameter 'nas_share_body' is set
    unless (exists $args{'nas_share_body'}) {
      croak("Missing the required parameter 'nas_share_body' when calling update_nas_share_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/nas_shares/{nas_share_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'nas_share_id'}) {
        my $_base_variable = "{" . "nas_share_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'nas_share_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'nas_share_body'}) {
        $_body_data = $args{'nas_share_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NasShare', $response);
    return $_response_object;
}

1;
