=begin comment

Nodeum API

The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Nodeum::SDK::ContainersApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Nodeum::SDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Nodeum::SDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Nodeum::SDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_container
#
# Creates a new container.
# 
# @param Container $container_body  (required)
{
    my $params = {
    'container_body' => {
        data_type => 'Container',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_container' } = { 
        summary => 'Creates a new container.',
        params => $params,
        returns => 'Container',
        };
}
# @return Container
#
sub create_container {
    my ($self, %args) = @_;

    # verify the required parameter 'container_body' is set
    unless (exists $args{'container_body'}) {
      croak("Missing the required parameter 'container_body' when calling create_container");
    }

    # parse inputs
    my $_resource_path = '/containers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'container_body'}) {
        $_body_data = $args{'container_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Container', $response);
    return $_response_object;
}

#
# create_container_privilege
#
# Creates a new privilege on the container.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param ContainerPrivilege $container_privilege_body  (required)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'container_privilege_body' => {
        data_type => 'ContainerPrivilege',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_container_privilege' } = { 
        summary => 'Creates a new privilege on the container.',
        params => $params,
        returns => 'ContainerPrivilege',
        };
}
# @return ContainerPrivilege
#
sub create_container_privilege {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling create_container_privilege");
    }

    # verify the required parameter 'container_privilege_body' is set
    unless (exists $args{'container_privilege_body'}) {
      croak("Missing the required parameter 'container_privilege_body' when calling create_container_privilege");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}/container_privileges';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'container_privilege_body'}) {
        $_body_data = $args{'container_privilege_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContainerPrivilege', $response);
    return $_response_object;
}

#
# destroy_container
#
# Destroys a specific container.
# 
# @param string $container_id Numeric ID or name of container. (required)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_container' } = { 
        summary => 'Destroys a specific container.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_container {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling destroy_container");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# destroy_container_privilege
#
# Destroys a specific privilege.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param int $container_privilege_id Numeric ID of container privilege. (required)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'container_privilege_id' => {
        data_type => 'int',
        description => 'Numeric ID of container privilege.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_container_privilege' } = { 
        summary => 'Destroys a specific privilege.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_container_privilege {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling destroy_container_privilege");
    }

    # verify the required parameter 'container_privilege_id' is set
    unless (exists $args{'container_privilege_id'}) {
      croak("Missing the required parameter 'container_privilege_id' when calling destroy_container_privilege");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}/container_privileges/{container_privilege_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'container_privilege_id'}) {
        my $_base_variable = "{" . "container_privilege_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_privilege_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# index_container_privileges
#
# Lists all privilege on the container.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $name Filter on name (optional)
# @param string $privilege Filter on privilege (optional)
# @param string $type Filter on type (optional)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'privilege' => {
        data_type => 'string',
        description => 'Filter on privilege',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_container_privileges' } = { 
        summary => 'Lists all privilege on the container.',
        params => $params,
        returns => 'ContainerPrivilegeCollection',
        };
}
# @return ContainerPrivilegeCollection
#
sub index_container_privileges {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling index_container_privileges");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}/container_privileges';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'privilege'}) {
        $query_params->{'privilege'} = $self->{api_client}->to_query_value($args{'privilege'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContainerPrivilegeCollection', $response);
    return $_response_object;
}

#
# index_containers
#
# Lists all containers.
# 
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $name Filter on name (optional)
# @param string $comment Filter on comment (optional)
# @param string $quota_total_size Filter on quota total size (optional)
# @param string $quota_on_cache Filter on quota on cache (optional)
# @param string $stat_total_files Filter on stat total files (optional)
# @param string $stat_total_size Filter on stat total size (optional)
# @param string $stat_size_on_cache Filter on stat size on cache (optional)
# @param string $guest_right Filter on guest right (optional)
# @param string $last_update Filter on last update (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'comment' => {
        data_type => 'string',
        description => 'Filter on comment',
        required => '0',
    },
    'quota_total_size' => {
        data_type => 'string',
        description => 'Filter on quota total size',
        required => '0',
    },
    'quota_on_cache' => {
        data_type => 'string',
        description => 'Filter on quota on cache',
        required => '0',
    },
    'stat_total_files' => {
        data_type => 'string',
        description => 'Filter on stat total files',
        required => '0',
    },
    'stat_total_size' => {
        data_type => 'string',
        description => 'Filter on stat total size',
        required => '0',
    },
    'stat_size_on_cache' => {
        data_type => 'string',
        description => 'Filter on stat size on cache',
        required => '0',
    },
    'guest_right' => {
        data_type => 'string',
        description => 'Filter on guest right',
        required => '0',
    },
    'last_update' => {
        data_type => 'string',
        description => 'Filter on last update',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_containers' } = { 
        summary => 'Lists all containers.',
        params => $params,
        returns => 'ContainerCollection',
        };
}
# @return ContainerCollection
#
sub index_containers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/containers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'comment'}) {
        $query_params->{'comment'} = $self->{api_client}->to_query_value($args{'comment'});
    }

    # query params
    if ( exists $args{'quota_total_size'}) {
        $query_params->{'quota_total_size'} = $self->{api_client}->to_query_value($args{'quota_total_size'});
    }

    # query params
    if ( exists $args{'quota_on_cache'}) {
        $query_params->{'quota_on_cache'} = $self->{api_client}->to_query_value($args{'quota_on_cache'});
    }

    # query params
    if ( exists $args{'stat_total_files'}) {
        $query_params->{'stat_total_files'} = $self->{api_client}->to_query_value($args{'stat_total_files'});
    }

    # query params
    if ( exists $args{'stat_total_size'}) {
        $query_params->{'stat_total_size'} = $self->{api_client}->to_query_value($args{'stat_total_size'});
    }

    # query params
    if ( exists $args{'stat_size_on_cache'}) {
        $query_params->{'stat_size_on_cache'} = $self->{api_client}->to_query_value($args{'stat_size_on_cache'});
    }

    # query params
    if ( exists $args{'guest_right'}) {
        $query_params->{'guest_right'} = $self->{api_client}->to_query_value($args{'guest_right'});
    }

    # query params
    if ( exists $args{'last_update'}) {
        $query_params->{'last_update'} = $self->{api_client}->to_query_value($args{'last_update'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContainerCollection', $response);
    return $_response_object;
}

#
# show_container
#
# Displays a specific container.
# 
# @param string $container_id Numeric ID or name of container. (required)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_container' } = { 
        summary => 'Displays a specific container.',
        params => $params,
        returns => 'Container',
        };
}
# @return Container
#
sub show_container {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling show_container");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Container', $response);
    return $_response_object;
}

#
# show_container_privilege
#
# Displays a specific privilege.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param int $container_privilege_id Numeric ID of container privilege. (required)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'container_privilege_id' => {
        data_type => 'int',
        description => 'Numeric ID of container privilege.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_container_privilege' } = { 
        summary => 'Displays a specific privilege.',
        params => $params,
        returns => 'ContainerPrivilege',
        };
}
# @return ContainerPrivilege
#
sub show_container_privilege {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling show_container_privilege");
    }

    # verify the required parameter 'container_privilege_id' is set
    unless (exists $args{'container_privilege_id'}) {
      croak("Missing the required parameter 'container_privilege_id' when calling show_container_privilege");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}/container_privileges/{container_privilege_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'container_privilege_id'}) {
        my $_base_variable = "{" . "container_privilege_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_privilege_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContainerPrivilege', $response);
    return $_response_object;
}

#
# update_container
#
# Updates a specific container.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param Container $container_body  (required)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'container_body' => {
        data_type => 'Container',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_container' } = { 
        summary => 'Updates a specific container.',
        params => $params,
        returns => 'Container',
        };
}
# @return Container
#
sub update_container {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling update_container");
    }

    # verify the required parameter 'container_body' is set
    unless (exists $args{'container_body'}) {
      croak("Missing the required parameter 'container_body' when calling update_container");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'container_body'}) {
        $_body_data = $args{'container_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Container', $response);
    return $_response_object;
}

#
# update_container_privilege
#
# Updates a specific privilege.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param int $container_privilege_id Numeric ID of container privilege. (required)
# @param ContainerPrivilege $container_privilege_body  (required)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'container_privilege_id' => {
        data_type => 'int',
        description => 'Numeric ID of container privilege.',
        required => '1',
    },
    'container_privilege_body' => {
        data_type => 'ContainerPrivilege',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_container_privilege' } = { 
        summary => 'Updates a specific privilege.',
        params => $params,
        returns => 'ContainerPrivilege',
        };
}
# @return ContainerPrivilege
#
sub update_container_privilege {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling update_container_privilege");
    }

    # verify the required parameter 'container_privilege_id' is set
    unless (exists $args{'container_privilege_id'}) {
      croak("Missing the required parameter 'container_privilege_id' when calling update_container_privilege");
    }

    # verify the required parameter 'container_privilege_body' is set
    unless (exists $args{'container_privilege_body'}) {
      croak("Missing the required parameter 'container_privilege_body' when calling update_container_privilege");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}/container_privileges/{container_privilege_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'container_privilege_id'}) {
        my $_base_variable = "{" . "container_privilege_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_privilege_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'container_privilege_body'}) {
        $_body_data = $args{'container_privilege_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContainerPrivilege', $response);
    return $_response_object;
}

1;
