=begin comment

Nodeum API

The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Nodeum::SDK::TapesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Nodeum::SDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Nodeum::SDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Nodeum::SDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# destroy_tape
#
# Destroys a specific tape. Only when it's an orphan.
# 
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'destroy_tape' } = { 
        summary => 'Destroys a specific tape. Only when it&#39;s an orphan.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub destroy_tape {
    my ($self, %args) = @_;

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling destroy_tape");
    }

    # parse inputs
    my $_resource_path = '/tapes/{tape_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# index_tape_stats
#
# List all tape statistics.
# 
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tape_stats' } = { 
        summary => 'List all tape statistics.',
        params => $params,
        returns => 'TapeStatCollection',
        };
}
# @return TapeStatCollection
#
sub index_tape_stats {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tape_stats';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeStatCollection', $response);
    return $_response_object;
}

#
# index_tapes
#
# Lists all tapes.
# 
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $tape_library_id Filter on tape library id (optional)
# @param string $pool_id Filter on a pool id (optional)
# @param string $barcode Filter on barcode (optional)
# @param string $location Filter on location (optional)
# @param string $type Filter on type (optional)
# @param string $locked Filter on locked (optional)
# @param string $scratch Filter on scratch (optional)
# @param string $cleaning Filter on cleaning (optional)
# @param string $write_protect Filter on write protect (optional)
# @param string $mounted Filter on mounted (optional)
# @param string $ejected Filter on ejected (optional)
# @param string $known Filter on known (optional)
# @param string $mount_count Filter on mount count (optional)
# @param string $date_in Filter on date in (optional)
# @param string $date_move Filter on date move (optional)
# @param string $free Filter on free (optional)
# @param string $max Filter on max (optional)
# @param string $last_size_update Filter on last size update (optional)
# @param string $last_maintenance Filter on last maintenance (optional)
# @param string $last_repack Filter on last repack (optional)
# @param string $repack_status Filter on repack status (optional)
# @param string $hash Filter on hash (optional)
# @param string $force_import_type Filter on force import type (optional)
# @param string $need_to_check Filter on need to check (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'tape_library_id' => {
        data_type => 'string',
        description => 'Filter on tape library id',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => 'Filter on a pool id',
        required => '0',
    },
    'barcode' => {
        data_type => 'string',
        description => 'Filter on barcode',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Filter on location',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'locked' => {
        data_type => 'string',
        description => 'Filter on locked',
        required => '0',
    },
    'scratch' => {
        data_type => 'string',
        description => 'Filter on scratch',
        required => '0',
    },
    'cleaning' => {
        data_type => 'string',
        description => 'Filter on cleaning',
        required => '0',
    },
    'write_protect' => {
        data_type => 'string',
        description => 'Filter on write protect',
        required => '0',
    },
    'mounted' => {
        data_type => 'string',
        description => 'Filter on mounted',
        required => '0',
    },
    'ejected' => {
        data_type => 'string',
        description => 'Filter on ejected',
        required => '0',
    },
    'known' => {
        data_type => 'string',
        description => 'Filter on known',
        required => '0',
    },
    'mount_count' => {
        data_type => 'string',
        description => 'Filter on mount count',
        required => '0',
    },
    'date_in' => {
        data_type => 'string',
        description => 'Filter on date in',
        required => '0',
    },
    'date_move' => {
        data_type => 'string',
        description => 'Filter on date move',
        required => '0',
    },
    'free' => {
        data_type => 'string',
        description => 'Filter on free',
        required => '0',
    },
    'max' => {
        data_type => 'string',
        description => 'Filter on max',
        required => '0',
    },
    'last_size_update' => {
        data_type => 'string',
        description => 'Filter on last size update',
        required => '0',
    },
    'last_maintenance' => {
        data_type => 'string',
        description => 'Filter on last maintenance',
        required => '0',
    },
    'last_repack' => {
        data_type => 'string',
        description => 'Filter on last repack',
        required => '0',
    },
    'repack_status' => {
        data_type => 'string',
        description => 'Filter on repack status',
        required => '0',
    },
    'hash' => {
        data_type => 'string',
        description => 'Filter on hash',
        required => '0',
    },
    'force_import_type' => {
        data_type => 'string',
        description => 'Filter on force import type',
        required => '0',
    },
    'need_to_check' => {
        data_type => 'string',
        description => 'Filter on need to check',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tapes' } = { 
        summary => 'Lists all tapes.',
        params => $params,
        returns => 'TapeCollection',
        };
}
# @return TapeCollection
#
sub index_tapes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tapes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'tape_library_id'}) {
        $query_params->{'tape_library_id'} = $self->{api_client}->to_query_value($args{'tape_library_id'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'pool_id'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    # query params
    if ( exists $args{'barcode'}) {
        $query_params->{'barcode'} = $self->{api_client}->to_query_value($args{'barcode'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'locked'}) {
        $query_params->{'locked'} = $self->{api_client}->to_query_value($args{'locked'});
    }

    # query params
    if ( exists $args{'scratch'}) {
        $query_params->{'scratch'} = $self->{api_client}->to_query_value($args{'scratch'});
    }

    # query params
    if ( exists $args{'cleaning'}) {
        $query_params->{'cleaning'} = $self->{api_client}->to_query_value($args{'cleaning'});
    }

    # query params
    if ( exists $args{'write_protect'}) {
        $query_params->{'write_protect'} = $self->{api_client}->to_query_value($args{'write_protect'});
    }

    # query params
    if ( exists $args{'mounted'}) {
        $query_params->{'mounted'} = $self->{api_client}->to_query_value($args{'mounted'});
    }

    # query params
    if ( exists $args{'ejected'}) {
        $query_params->{'ejected'} = $self->{api_client}->to_query_value($args{'ejected'});
    }

    # query params
    if ( exists $args{'known'}) {
        $query_params->{'known'} = $self->{api_client}->to_query_value($args{'known'});
    }

    # query params
    if ( exists $args{'mount_count'}) {
        $query_params->{'mount_count'} = $self->{api_client}->to_query_value($args{'mount_count'});
    }

    # query params
    if ( exists $args{'date_in'}) {
        $query_params->{'date_in'} = $self->{api_client}->to_query_value($args{'date_in'});
    }

    # query params
    if ( exists $args{'date_move'}) {
        $query_params->{'date_move'} = $self->{api_client}->to_query_value($args{'date_move'});
    }

    # query params
    if ( exists $args{'free'}) {
        $query_params->{'free'} = $self->{api_client}->to_query_value($args{'free'});
    }

    # query params
    if ( exists $args{'max'}) {
        $query_params->{'max'} = $self->{api_client}->to_query_value($args{'max'});
    }

    # query params
    if ( exists $args{'last_size_update'}) {
        $query_params->{'last_size_update'} = $self->{api_client}->to_query_value($args{'last_size_update'});
    }

    # query params
    if ( exists $args{'last_maintenance'}) {
        $query_params->{'last_maintenance'} = $self->{api_client}->to_query_value($args{'last_maintenance'});
    }

    # query params
    if ( exists $args{'last_repack'}) {
        $query_params->{'last_repack'} = $self->{api_client}->to_query_value($args{'last_repack'});
    }

    # query params
    if ( exists $args{'repack_status'}) {
        $query_params->{'repack_status'} = $self->{api_client}->to_query_value($args{'repack_status'});
    }

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # query params
    if ( exists $args{'force_import_type'}) {
        $query_params->{'force_import_type'} = $self->{api_client}->to_query_value($args{'force_import_type'});
    }

    # query params
    if ( exists $args{'need_to_check'}) {
        $query_params->{'need_to_check'} = $self->{api_client}->to_query_value($args{'need_to_check'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeCollection', $response);
    return $_response_object;
}

#
# index_tapes_by_pool
#
# Lists all tapes.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $tape_library_id Filter on tape library id (optional)
# @param string $barcode Filter on barcode (optional)
# @param string $location Filter on location (optional)
# @param string $type Filter on type (optional)
# @param string $locked Filter on locked (optional)
# @param string $scratch Filter on scratch (optional)
# @param string $cleaning Filter on cleaning (optional)
# @param string $write_protect Filter on write protect (optional)
# @param string $mounted Filter on mounted (optional)
# @param string $ejected Filter on ejected (optional)
# @param string $known Filter on known (optional)
# @param string $mount_count Filter on mount count (optional)
# @param string $date_in Filter on date in (optional)
# @param string $date_move Filter on date move (optional)
# @param string $free Filter on free (optional)
# @param string $max Filter on max (optional)
# @param string $last_size_update Filter on last size update (optional)
# @param string $last_maintenance Filter on last maintenance (optional)
# @param string $last_repack Filter on last repack (optional)
# @param string $repack_status Filter on repack status (optional)
# @param string $hash Filter on hash (optional)
# @param string $force_import_type Filter on force import type (optional)
# @param string $need_to_check Filter on need to check (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'tape_library_id' => {
        data_type => 'string',
        description => 'Filter on tape library id',
        required => '0',
    },
    'barcode' => {
        data_type => 'string',
        description => 'Filter on barcode',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Filter on location',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'locked' => {
        data_type => 'string',
        description => 'Filter on locked',
        required => '0',
    },
    'scratch' => {
        data_type => 'string',
        description => 'Filter on scratch',
        required => '0',
    },
    'cleaning' => {
        data_type => 'string',
        description => 'Filter on cleaning',
        required => '0',
    },
    'write_protect' => {
        data_type => 'string',
        description => 'Filter on write protect',
        required => '0',
    },
    'mounted' => {
        data_type => 'string',
        description => 'Filter on mounted',
        required => '0',
    },
    'ejected' => {
        data_type => 'string',
        description => 'Filter on ejected',
        required => '0',
    },
    'known' => {
        data_type => 'string',
        description => 'Filter on known',
        required => '0',
    },
    'mount_count' => {
        data_type => 'string',
        description => 'Filter on mount count',
        required => '0',
    },
    'date_in' => {
        data_type => 'string',
        description => 'Filter on date in',
        required => '0',
    },
    'date_move' => {
        data_type => 'string',
        description => 'Filter on date move',
        required => '0',
    },
    'free' => {
        data_type => 'string',
        description => 'Filter on free',
        required => '0',
    },
    'max' => {
        data_type => 'string',
        description => 'Filter on max',
        required => '0',
    },
    'last_size_update' => {
        data_type => 'string',
        description => 'Filter on last size update',
        required => '0',
    },
    'last_maintenance' => {
        data_type => 'string',
        description => 'Filter on last maintenance',
        required => '0',
    },
    'last_repack' => {
        data_type => 'string',
        description => 'Filter on last repack',
        required => '0',
    },
    'repack_status' => {
        data_type => 'string',
        description => 'Filter on repack status',
        required => '0',
    },
    'hash' => {
        data_type => 'string',
        description => 'Filter on hash',
        required => '0',
    },
    'force_import_type' => {
        data_type => 'string',
        description => 'Filter on force import type',
        required => '0',
    },
    'need_to_check' => {
        data_type => 'string',
        description => 'Filter on need to check',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tapes_by_pool' } = { 
        summary => 'Lists all tapes.',
        params => $params,
        returns => 'TapeCollection',
        };
}
# @return TapeCollection
#
sub index_tapes_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling index_tapes_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/tapes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'tape_library_id'}) {
        $query_params->{'tape_library_id'} = $self->{api_client}->to_query_value($args{'tape_library_id'});
    }

    # query params
    if ( exists $args{'barcode'}) {
        $query_params->{'barcode'} = $self->{api_client}->to_query_value($args{'barcode'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'locked'}) {
        $query_params->{'locked'} = $self->{api_client}->to_query_value($args{'locked'});
    }

    # query params
    if ( exists $args{'scratch'}) {
        $query_params->{'scratch'} = $self->{api_client}->to_query_value($args{'scratch'});
    }

    # query params
    if ( exists $args{'cleaning'}) {
        $query_params->{'cleaning'} = $self->{api_client}->to_query_value($args{'cleaning'});
    }

    # query params
    if ( exists $args{'write_protect'}) {
        $query_params->{'write_protect'} = $self->{api_client}->to_query_value($args{'write_protect'});
    }

    # query params
    if ( exists $args{'mounted'}) {
        $query_params->{'mounted'} = $self->{api_client}->to_query_value($args{'mounted'});
    }

    # query params
    if ( exists $args{'ejected'}) {
        $query_params->{'ejected'} = $self->{api_client}->to_query_value($args{'ejected'});
    }

    # query params
    if ( exists $args{'known'}) {
        $query_params->{'known'} = $self->{api_client}->to_query_value($args{'known'});
    }

    # query params
    if ( exists $args{'mount_count'}) {
        $query_params->{'mount_count'} = $self->{api_client}->to_query_value($args{'mount_count'});
    }

    # query params
    if ( exists $args{'date_in'}) {
        $query_params->{'date_in'} = $self->{api_client}->to_query_value($args{'date_in'});
    }

    # query params
    if ( exists $args{'date_move'}) {
        $query_params->{'date_move'} = $self->{api_client}->to_query_value($args{'date_move'});
    }

    # query params
    if ( exists $args{'free'}) {
        $query_params->{'free'} = $self->{api_client}->to_query_value($args{'free'});
    }

    # query params
    if ( exists $args{'max'}) {
        $query_params->{'max'} = $self->{api_client}->to_query_value($args{'max'});
    }

    # query params
    if ( exists $args{'last_size_update'}) {
        $query_params->{'last_size_update'} = $self->{api_client}->to_query_value($args{'last_size_update'});
    }

    # query params
    if ( exists $args{'last_maintenance'}) {
        $query_params->{'last_maintenance'} = $self->{api_client}->to_query_value($args{'last_maintenance'});
    }

    # query params
    if ( exists $args{'last_repack'}) {
        $query_params->{'last_repack'} = $self->{api_client}->to_query_value($args{'last_repack'});
    }

    # query params
    if ( exists $args{'repack_status'}) {
        $query_params->{'repack_status'} = $self->{api_client}->to_query_value($args{'repack_status'});
    }

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # query params
    if ( exists $args{'force_import_type'}) {
        $query_params->{'force_import_type'} = $self->{api_client}->to_query_value($args{'force_import_type'});
    }

    # query params
    if ( exists $args{'need_to_check'}) {
        $query_params->{'need_to_check'} = $self->{api_client}->to_query_value($args{'need_to_check'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeCollection', $response);
    return $_response_object;
}

#
# index_tapes_by_tape_library
#
# Lists all tapes.
# 
# @param string $tape_library_id Numeric ID, serial, or name of tape library. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $pool_id Filter on a pool id (optional)
# @param string $barcode Filter on barcode (optional)
# @param string $location Filter on location (optional)
# @param string $type Filter on type (optional)
# @param string $locked Filter on locked (optional)
# @param string $scratch Filter on scratch (optional)
# @param string $cleaning Filter on cleaning (optional)
# @param string $write_protect Filter on write protect (optional)
# @param string $mounted Filter on mounted (optional)
# @param string $ejected Filter on ejected (optional)
# @param string $known Filter on known (optional)
# @param string $mount_count Filter on mount count (optional)
# @param string $date_in Filter on date in (optional)
# @param string $date_move Filter on date move (optional)
# @param string $free Filter on free (optional)
# @param string $max Filter on max (optional)
# @param string $last_size_update Filter on last size update (optional)
# @param string $last_maintenance Filter on last maintenance (optional)
# @param string $last_repack Filter on last repack (optional)
# @param string $repack_status Filter on repack status (optional)
# @param string $hash Filter on hash (optional)
# @param string $force_import_type Filter on force import type (optional)
# @param string $need_to_check Filter on need to check (optional)
{
    my $params = {
    'tape_library_id' => {
        data_type => 'string',
        description => 'Numeric ID, serial, or name of tape library.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => 'Filter on a pool id',
        required => '0',
    },
    'barcode' => {
        data_type => 'string',
        description => 'Filter on barcode',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Filter on location',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'locked' => {
        data_type => 'string',
        description => 'Filter on locked',
        required => '0',
    },
    'scratch' => {
        data_type => 'string',
        description => 'Filter on scratch',
        required => '0',
    },
    'cleaning' => {
        data_type => 'string',
        description => 'Filter on cleaning',
        required => '0',
    },
    'write_protect' => {
        data_type => 'string',
        description => 'Filter on write protect',
        required => '0',
    },
    'mounted' => {
        data_type => 'string',
        description => 'Filter on mounted',
        required => '0',
    },
    'ejected' => {
        data_type => 'string',
        description => 'Filter on ejected',
        required => '0',
    },
    'known' => {
        data_type => 'string',
        description => 'Filter on known',
        required => '0',
    },
    'mount_count' => {
        data_type => 'string',
        description => 'Filter on mount count',
        required => '0',
    },
    'date_in' => {
        data_type => 'string',
        description => 'Filter on date in',
        required => '0',
    },
    'date_move' => {
        data_type => 'string',
        description => 'Filter on date move',
        required => '0',
    },
    'free' => {
        data_type => 'string',
        description => 'Filter on free',
        required => '0',
    },
    'max' => {
        data_type => 'string',
        description => 'Filter on max',
        required => '0',
    },
    'last_size_update' => {
        data_type => 'string',
        description => 'Filter on last size update',
        required => '0',
    },
    'last_maintenance' => {
        data_type => 'string',
        description => 'Filter on last maintenance',
        required => '0',
    },
    'last_repack' => {
        data_type => 'string',
        description => 'Filter on last repack',
        required => '0',
    },
    'repack_status' => {
        data_type => 'string',
        description => 'Filter on repack status',
        required => '0',
    },
    'hash' => {
        data_type => 'string',
        description => 'Filter on hash',
        required => '0',
    },
    'force_import_type' => {
        data_type => 'string',
        description => 'Filter on force import type',
        required => '0',
    },
    'need_to_check' => {
        data_type => 'string',
        description => 'Filter on need to check',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tapes_by_tape_library' } = { 
        summary => 'Lists all tapes.',
        params => $params,
        returns => 'TapeCollection',
        };
}
# @return TapeCollection
#
sub index_tapes_by_tape_library {
    my ($self, %args) = @_;

    # verify the required parameter 'tape_library_id' is set
    unless (exists $args{'tape_library_id'}) {
      croak("Missing the required parameter 'tape_library_id' when calling index_tapes_by_tape_library");
    }

    # parse inputs
    my $_resource_path = '/tape_libraries/{tape_library_id}/tapes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'pool_id'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    # query params
    if ( exists $args{'barcode'}) {
        $query_params->{'barcode'} = $self->{api_client}->to_query_value($args{'barcode'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'locked'}) {
        $query_params->{'locked'} = $self->{api_client}->to_query_value($args{'locked'});
    }

    # query params
    if ( exists $args{'scratch'}) {
        $query_params->{'scratch'} = $self->{api_client}->to_query_value($args{'scratch'});
    }

    # query params
    if ( exists $args{'cleaning'}) {
        $query_params->{'cleaning'} = $self->{api_client}->to_query_value($args{'cleaning'});
    }

    # query params
    if ( exists $args{'write_protect'}) {
        $query_params->{'write_protect'} = $self->{api_client}->to_query_value($args{'write_protect'});
    }

    # query params
    if ( exists $args{'mounted'}) {
        $query_params->{'mounted'} = $self->{api_client}->to_query_value($args{'mounted'});
    }

    # query params
    if ( exists $args{'ejected'}) {
        $query_params->{'ejected'} = $self->{api_client}->to_query_value($args{'ejected'});
    }

    # query params
    if ( exists $args{'known'}) {
        $query_params->{'known'} = $self->{api_client}->to_query_value($args{'known'});
    }

    # query params
    if ( exists $args{'mount_count'}) {
        $query_params->{'mount_count'} = $self->{api_client}->to_query_value($args{'mount_count'});
    }

    # query params
    if ( exists $args{'date_in'}) {
        $query_params->{'date_in'} = $self->{api_client}->to_query_value($args{'date_in'});
    }

    # query params
    if ( exists $args{'date_move'}) {
        $query_params->{'date_move'} = $self->{api_client}->to_query_value($args{'date_move'});
    }

    # query params
    if ( exists $args{'free'}) {
        $query_params->{'free'} = $self->{api_client}->to_query_value($args{'free'});
    }

    # query params
    if ( exists $args{'max'}) {
        $query_params->{'max'} = $self->{api_client}->to_query_value($args{'max'});
    }

    # query params
    if ( exists $args{'last_size_update'}) {
        $query_params->{'last_size_update'} = $self->{api_client}->to_query_value($args{'last_size_update'});
    }

    # query params
    if ( exists $args{'last_maintenance'}) {
        $query_params->{'last_maintenance'} = $self->{api_client}->to_query_value($args{'last_maintenance'});
    }

    # query params
    if ( exists $args{'last_repack'}) {
        $query_params->{'last_repack'} = $self->{api_client}->to_query_value($args{'last_repack'});
    }

    # query params
    if ( exists $args{'repack_status'}) {
        $query_params->{'repack_status'} = $self->{api_client}->to_query_value($args{'repack_status'});
    }

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # query params
    if ( exists $args{'force_import_type'}) {
        $query_params->{'force_import_type'} = $self->{api_client}->to_query_value($args{'force_import_type'});
    }

    # query params
    if ( exists $args{'need_to_check'}) {
        $query_params->{'need_to_check'} = $self->{api_client}->to_query_value($args{'need_to_check'});
    }

    # path params
    if ( exists $args{'tape_library_id'}) {
        my $_base_variable = "{" . "tape_library_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_library_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeCollection', $response);
    return $_response_object;
}

#
# mount_status_tape
#
# Get mount status of Tape.
# 
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_tape' } = { 
        summary => 'Get mount status of Tape.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_tape {
    my ($self, %args) = @_;

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling mount_status_tape");
    }

    # parse inputs
    my $_resource_path = '/tapes/{tape_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# mount_status_tape_by_pool
#
# Get mount status of Tape.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_tape_by_pool' } = { 
        summary => 'Get mount status of Tape.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_tape_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling mount_status_tape_by_pool");
    }

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling mount_status_tape_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/tapes/{tape_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# mount_status_tape_by_tape_library
#
# Get mount status of Tape.
# 
# @param string $tape_library_id Numeric ID, serial, or name of tape library. (required)
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'tape_library_id' => {
        data_type => 'string',
        description => 'Numeric ID, serial, or name of tape library.',
        required => '1',
    },
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_tape_by_tape_library' } = { 
        summary => 'Get mount status of Tape.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_tape_by_tape_library {
    my ($self, %args) = @_;

    # verify the required parameter 'tape_library_id' is set
    unless (exists $args{'tape_library_id'}) {
      croak("Missing the required parameter 'tape_library_id' when calling mount_status_tape_by_tape_library");
    }

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling mount_status_tape_by_tape_library");
    }

    # parse inputs
    my $_resource_path = '/tape_libraries/{tape_library_id}/tapes/{tape_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'tape_library_id'}) {
        my $_base_variable = "{" . "tape_library_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_library_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# show_tape
#
# Displays a specific tape.
# 
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_tape' } = { 
        summary => 'Displays a specific tape.',
        params => $params,
        returns => 'Tape',
        };
}
# @return Tape
#
sub show_tape {
    my ($self, %args) = @_;

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling show_tape");
    }

    # parse inputs
    my $_resource_path = '/tapes/{tape_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Tape', $response);
    return $_response_object;
}

#
# show_tape_by_pool
#
# Displays a specific tape.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_tape_by_pool' } = { 
        summary => 'Displays a specific tape.',
        params => $params,
        returns => 'Tape',
        };
}
# @return Tape
#
sub show_tape_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling show_tape_by_pool");
    }

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling show_tape_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/tapes/{tape_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Tape', $response);
    return $_response_object;
}

#
# show_tape_by_tape_library
#
# Displays a specific tape.
# 
# @param string $tape_library_id Numeric ID, serial, or name of tape library. (required)
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'tape_library_id' => {
        data_type => 'string',
        description => 'Numeric ID, serial, or name of tape library.',
        required => '1',
    },
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_tape_by_tape_library' } = { 
        summary => 'Displays a specific tape.',
        params => $params,
        returns => 'Tape',
        };
}
# @return Tape
#
sub show_tape_by_tape_library {
    my ($self, %args) = @_;

    # verify the required parameter 'tape_library_id' is set
    unless (exists $args{'tape_library_id'}) {
      croak("Missing the required parameter 'tape_library_id' when calling show_tape_by_tape_library");
    }

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling show_tape_by_tape_library");
    }

    # parse inputs
    my $_resource_path = '/tape_libraries/{tape_library_id}/tapes/{tape_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'tape_library_id'}) {
        my $_base_variable = "{" . "tape_library_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_library_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Tape', $response);
    return $_response_object;
}

#
# show_tape_stat
#
# Display statistic for a specific tape.
# 
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_tape_stat' } = { 
        summary => 'Display statistic for a specific tape.',
        params => $params,
        returns => 'TapeStat',
        };
}
# @return TapeStat
#
sub show_tape_stat {
    my ($self, %args) = @_;

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling show_tape_stat");
    }

    # parse inputs
    my $_resource_path = '/tapes/{tape_id}/tape_stat';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeStat', $response);
    return $_response_object;
}

#
# show_tape_stat_by_pool
#
# Display statistic for a specific tape.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_tape_stat_by_pool' } = { 
        summary => 'Display statistic for a specific tape.',
        params => $params,
        returns => 'TapeStat',
        };
}
# @return TapeStat
#
sub show_tape_stat_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling show_tape_stat_by_pool");
    }

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling show_tape_stat_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/tapes/{tape_id}/tape_stat';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeStat', $response);
    return $_response_object;
}

#
# show_tape_stat_by_tape_library
#
# Display statistic for a specific tape.
# 
# @param string $tape_library_id Numeric ID, serial, or name of tape library. (required)
# @param string $tape_id Numeric ID, or barcode of tape. (required)
{
    my $params = {
    'tape_library_id' => {
        data_type => 'string',
        description => 'Numeric ID, serial, or name of tape library.',
        required => '1',
    },
    'tape_id' => {
        data_type => 'string',
        description => 'Numeric ID, or barcode of tape.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_tape_stat_by_tape_library' } = { 
        summary => 'Display statistic for a specific tape.',
        params => $params,
        returns => 'TapeStat',
        };
}
# @return TapeStat
#
sub show_tape_stat_by_tape_library {
    my ($self, %args) = @_;

    # verify the required parameter 'tape_library_id' is set
    unless (exists $args{'tape_library_id'}) {
      croak("Missing the required parameter 'tape_library_id' when calling show_tape_stat_by_tape_library");
    }

    # verify the required parameter 'tape_id' is set
    unless (exists $args{'tape_id'}) {
      croak("Missing the required parameter 'tape_id' when calling show_tape_stat_by_tape_library");
    }

    # parse inputs
    my $_resource_path = '/tape_libraries/{tape_library_id}/tapes/{tape_id}/tape_stat';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'tape_library_id'}) {
        my $_base_variable = "{" . "tape_library_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_library_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'tape_id'}) {
        my $_base_variable = "{" . "tape_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tape_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeStat', $response);
    return $_response_object;
}

1;
