=begin comment

Nodeum API

The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Nodeum::SDK::FilesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Nodeum::SDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Nodeum::SDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Nodeum::SDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# files_children
#
# Lists files under a specific folder.
# 
# @param int $file_parent_id Numeric ID of parent folder. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'file_parent_id' => {
        data_type => 'int',
        description => 'Numeric ID of parent folder.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'files_children' } = { 
        summary => 'Lists files under a specific folder.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub files_children {
    my ($self, %args) = @_;

    # verify the required parameter 'file_parent_id' is set
    unless (exists $args{'file_parent_id'}) {
      croak("Missing the required parameter 'file_parent_id' when calling files_children");
    }

    # parse inputs
    my $_resource_path = '/files/{file_parent_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'file_parent_id'}) {
        my $_base_variable = "{" . "file_parent_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_parent_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# files_children_by_container
#
# Lists files under a specific folder.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param int $file_parent_id Numeric ID of parent folder. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'file_parent_id' => {
        data_type => 'int',
        description => 'Numeric ID of parent folder.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'files_children_by_container' } = { 
        summary => 'Lists files under a specific folder.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub files_children_by_container {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling files_children_by_container");
    }

    # verify the required parameter 'file_parent_id' is set
    unless (exists $args{'file_parent_id'}) {
      croak("Missing the required parameter 'file_parent_id' when calling files_children_by_container");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}/files/{file_parent_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_parent_id'}) {
        my $_base_variable = "{" . "file_parent_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_parent_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# files_children_by_pool
#
# Lists files under a specific folder.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $file_parent_id Numeric ID of parent folder. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'file_parent_id' => {
        data_type => 'int',
        description => 'Numeric ID of parent folder.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'files_children_by_pool' } = { 
        summary => 'Lists files under a specific folder.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub files_children_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling files_children_by_pool");
    }

    # verify the required parameter 'file_parent_id' is set
    unless (exists $args{'file_parent_id'}) {
      croak("Missing the required parameter 'file_parent_id' when calling files_children_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/files/{file_parent_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_parent_id'}) {
        my $_base_variable = "{" . "file_parent_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_parent_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# files_children_by_task
#
# Lists files under a specific folder.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param int $file_parent_id Numeric ID of parent folder. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'file_parent_id' => {
        data_type => 'int',
        description => 'Numeric ID of parent folder.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'files_children_by_task' } = { 
        summary => 'Lists files under a specific folder.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub files_children_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling files_children_by_task");
    }

    # verify the required parameter 'file_parent_id' is set
    unless (exists $args{'file_parent_id'}) {
      croak("Missing the required parameter 'file_parent_id' when calling files_children_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/files/{file_parent_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_parent_id'}) {
        my $_base_variable = "{" . "file_parent_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_parent_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# files_children_by_task_execution
#
# Lists files under a specific folder.
# 
# @param string $task_execution_id Numeric ID of task execution. (required)
# @param int $file_parent_id Numeric ID of parent folder. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    'file_parent_id' => {
        data_type => 'int',
        description => 'Numeric ID of parent folder.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'files_children_by_task_execution' } = { 
        summary => 'Lists files under a specific folder.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub files_children_by_task_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling files_children_by_task_execution");
    }

    # verify the required parameter 'file_parent_id' is set
    unless (exists $args{'file_parent_id'}) {
      croak("Missing the required parameter 'file_parent_id' when calling files_children_by_task_execution");
    }

    # parse inputs
    my $_resource_path = '/task_executions/{task_execution_id}/files/{file_parent_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_parent_id'}) {
        my $_base_variable = "{" . "file_parent_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_parent_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# files_children_by_task_execution_by_task
#
# Lists files under a specific folder.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $task_execution_id Numeric ID of task execution. (required)
# @param int $file_parent_id Numeric ID of parent folder. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    'file_parent_id' => {
        data_type => 'int',
        description => 'Numeric ID of parent folder.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'files_children_by_task_execution_by_task' } = { 
        summary => 'Lists files under a specific folder.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub files_children_by_task_execution_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling files_children_by_task_execution_by_task");
    }

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling files_children_by_task_execution_by_task");
    }

    # verify the required parameter 'file_parent_id' is set
    unless (exists $args{'file_parent_id'}) {
      croak("Missing the required parameter 'file_parent_id' when calling files_children_by_task_execution_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_parent_id'}) {
        my $_base_variable = "{" . "file_parent_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_parent_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# import_files_children_by_pool
#
# Lists files under a specific folder on tape of pools, specific for Data Exchange.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $file_parent_id Numeric ID of parent folder. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'file_parent_id' => {
        data_type => 'int',
        description => 'Numeric ID of parent folder.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'import_files_children_by_pool' } = { 
        summary => 'Lists files under a specific folder on tape of pools, specific for Data Exchange.',
        params => $params,
        returns => 'ImportFileCollection',
        };
}
# @return ImportFileCollection
#
sub import_files_children_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling import_files_children_by_pool");
    }

    # verify the required parameter 'file_parent_id' is set
    unless (exists $args{'file_parent_id'}) {
      croak("Missing the required parameter 'file_parent_id' when calling import_files_children_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/import_files/{file_parent_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_parent_id'}) {
        my $_base_variable = "{" . "file_parent_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_parent_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImportFileCollection', $response);
    return $_response_object;
}

#
# index_files
#
# Lists files on root.
# 
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_files' } = { 
        summary => 'Lists files on root.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub index_files {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# index_files_by_container
#
# Lists files on root.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_files_by_container' } = { 
        summary => 'Lists files on root.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub index_files_by_container {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling index_files_by_container");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# index_files_by_pool
#
# Lists files on root.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_files_by_pool' } = { 
        summary => 'Lists files on root.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub index_files_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling index_files_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# index_files_by_task
#
# Lists files on root.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_files_by_task' } = { 
        summary => 'Lists files on root.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub index_files_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling index_files_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# index_files_by_task_execution
#
# Lists files on root.
# 
# @param string $task_execution_id Numeric ID of task execution. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_files_by_task_execution' } = { 
        summary => 'Lists files on root.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub index_files_by_task_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling index_files_by_task_execution");
    }

    # parse inputs
    my $_resource_path = '/task_executions/{task_execution_id}/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# index_files_by_task_execution_by_task
#
# Lists files on root.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $task_execution_id Numeric ID of task execution. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_files_by_task_execution_by_task' } = { 
        summary => 'Lists files on root.',
        params => $params,
        returns => 'NodeumFileCollection',
        };
}
# @return NodeumFileCollection
#
sub index_files_by_task_execution_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling index_files_by_task_execution_by_task");
    }

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling index_files_by_task_execution_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/task_executions/{task_execution_id}/files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileCollection', $response);
    return $_response_object;
}

#
# index_import_files_by_pool
#
# Lists files on root of tape of pools, specific for Data Exchange.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $file_id Filter on file id (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $permission Filter on permission (optional)
# @param string $size Filter on size (optional)
# @param string $change_date Filter on change date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $access_date Filter on access date (optional)
# @param string $gid Filter on gid (optional)
# @param string $uid Filter on uid (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'file_id' => {
        data_type => 'string',
        description => 'Filter on file id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'permission' => {
        data_type => 'string',
        description => 'Filter on permission',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    'change_date' => {
        data_type => 'string',
        description => 'Filter on change date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'access_date' => {
        data_type => 'string',
        description => 'Filter on access date',
        required => '0',
    },
    'gid' => {
        data_type => 'string',
        description => 'Filter on gid',
        required => '0',
    },
    'uid' => {
        data_type => 'string',
        description => 'Filter on uid',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_import_files_by_pool' } = { 
        summary => 'Lists files on root of tape of pools, specific for Data Exchange.',
        params => $params,
        returns => 'ImportFileCollection',
        };
}
# @return ImportFileCollection
#
sub index_import_files_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling index_import_files_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/import_files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'file_id'}) {
        $query_params->{'file_id'} = $self->{api_client}->to_query_value($args{'file_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'permission'}) {
        $query_params->{'permission'} = $self->{api_client}->to_query_value($args{'permission'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'change_date'}) {
        $query_params->{'change_date'} = $self->{api_client}->to_query_value($args{'change_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'access_date'}) {
        $query_params->{'access_date'} = $self->{api_client}->to_query_value($args{'access_date'});
    }

    # query params
    if ( exists $args{'gid'}) {
        $query_params->{'gid'} = $self->{api_client}->to_query_value($args{'gid'});
    }

    # query params
    if ( exists $args{'uid'}) {
        $query_params->{'uid'} = $self->{api_client}->to_query_value($args{'uid'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImportFileCollection', $response);
    return $_response_object;
}

#
# index_on_tapes_files_by_pool
#
# Lists files on root of tape of pools, specific for Active and Offline.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $size Filter on size (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_on_tapes_files_by_pool' } = { 
        summary => 'Lists files on root of tape of pools, specific for Active and Offline.',
        params => $params,
        returns => 'OnTapesFileCollection',
        };
}
# @return OnTapesFileCollection
#
sub index_on_tapes_files_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling index_on_tapes_files_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/on_tapes_files';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OnTapesFileCollection', $response);
    return $_response_object;
}

#
# index_tapes_by_file_by_pool
#
# Displays tapes containing specific file, related to the specific pool.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tapes_by_file_by_pool' } = { 
        summary => 'Displays tapes containing specific file, related to the specific pool.',
        params => $params,
        returns => 'TapeCollection',
        };
}
# @return TapeCollection
#
sub index_tapes_by_file_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling index_tapes_by_file_by_pool");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling index_tapes_by_file_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/files/{file_id}/tapes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeCollection', $response);
    return $_response_object;
}

#
# index_tapes_by_file_by_task
#
# Displays tapes containing specific file, related to the specific task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tapes_by_file_by_task' } = { 
        summary => 'Displays tapes containing specific file, related to the specific task.',
        params => $params,
        returns => 'TapeCollection',
        };
}
# @return TapeCollection
#
sub index_tapes_by_file_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling index_tapes_by_file_by_task");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling index_tapes_by_file_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/files/{file_id}/tapes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeCollection', $response);
    return $_response_object;
}

#
# index_tapes_by_file_by_task_execution
#
# Displays tapes containing specific file, related to the specific task.
# 
# @param string $task_execution_id Numeric ID of task execution. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tapes_by_file_by_task_execution' } = { 
        summary => 'Displays tapes containing specific file, related to the specific task.',
        params => $params,
        returns => 'TapeCollection',
        };
}
# @return TapeCollection
#
sub index_tapes_by_file_by_task_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling index_tapes_by_file_by_task_execution");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling index_tapes_by_file_by_task_execution");
    }

    # parse inputs
    my $_resource_path = '/task_executions/{task_execution_id}/files/{file_id}/tapes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeCollection', $response);
    return $_response_object;
}

#
# index_tapes_by_file_by_task_execution_by_task
#
# Displays tapes containing specific file, related to the specific task.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $task_execution_id Numeric ID of task execution. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_tapes_by_file_by_task_execution_by_task' } = { 
        summary => 'Displays tapes containing specific file, related to the specific task.',
        params => $params,
        returns => 'TapeCollection',
        };
}
# @return TapeCollection
#
sub index_tapes_by_file_by_task_execution_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling index_tapes_by_file_by_task_execution_by_task");
    }

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling index_tapes_by_file_by_task_execution_by_task");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling index_tapes_by_file_by_task_execution_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}/tapes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TapeCollection', $response);
    return $_response_object;
}

#
# on_tapes_files_children_by_pool
#
# Lists files under a specific folder on tape of pools, specific for Active and Offline.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $file_parent_id Numeric ID of parent folder. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param string $name Filter on name (optional)
# @param string $type Filter on type (optional)
# @param string $size Filter on size (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'file_parent_id' => {
        data_type => 'int',
        description => 'Numeric ID of parent folder.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Filter on type',
        required => '0',
    },
    'size' => {
        data_type => 'string',
        description => 'Filter on size',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'on_tapes_files_children_by_pool' } = { 
        summary => 'Lists files under a specific folder on tape of pools, specific for Active and Offline.',
        params => $params,
        returns => 'OnTapesFileCollection',
        };
}
# @return OnTapesFileCollection
#
sub on_tapes_files_children_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling on_tapes_files_children_by_pool");
    }

    # verify the required parameter 'file_parent_id' is set
    unless (exists $args{'file_parent_id'}) {
      croak("Missing the required parameter 'file_parent_id' when calling on_tapes_files_children_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/on_tapes_files/{file_parent_id}/children';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_parent_id'}) {
        my $_base_variable = "{" . "file_parent_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_parent_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OnTapesFileCollection', $response);
    return $_response_object;
}

#
# show_file
#
# Displays a specific file.
# 
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_file' } = { 
        summary => 'Displays a specific file.',
        params => $params,
        returns => 'NodeumFileWithPath',
        };
}
# @return NodeumFileWithPath
#
sub show_file {
    my ($self, %args) = @_;

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling show_file");
    }

    # parse inputs
    my $_resource_path = '/files/{file_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileWithPath', $response);
    return $_response_object;
}

#
# show_file_by_container
#
# Displays a specific file.
# 
# @param string $container_id Numeric ID or name of container. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'container_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of container.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_file_by_container' } = { 
        summary => 'Displays a specific file.',
        params => $params,
        returns => 'NodeumFileWithPath',
        };
}
# @return NodeumFileWithPath
#
sub show_file_by_container {
    my ($self, %args) = @_;

    # verify the required parameter 'container_id' is set
    unless (exists $args{'container_id'}) {
      croak("Missing the required parameter 'container_id' when calling show_file_by_container");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling show_file_by_container");
    }

    # parse inputs
    my $_resource_path = '/containers/{container_id}/files/{file_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'container_id'}) {
        my $_base_variable = "{" . "container_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'container_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileWithPath', $response);
    return $_response_object;
}

#
# show_file_by_pool
#
# Displays a specific file.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_file_by_pool' } = { 
        summary => 'Displays a specific file.',
        params => $params,
        returns => 'NodeumFileWithPath',
        };
}
# @return NodeumFileWithPath
#
sub show_file_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling show_file_by_pool");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling show_file_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/files/{file_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileWithPath', $response);
    return $_response_object;
}

#
# show_file_by_task
#
# Displays a specific file.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_file_by_task' } = { 
        summary => 'Displays a specific file.',
        params => $params,
        returns => 'NodeumFileWithPath',
        };
}
# @return NodeumFileWithPath
#
sub show_file_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling show_file_by_task");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling show_file_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/files/{file_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileWithPath', $response);
    return $_response_object;
}

#
# show_file_by_task_execution
#
# Displays a specific file.
# 
# @param string $task_execution_id Numeric ID of task execution. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_file_by_task_execution' } = { 
        summary => 'Displays a specific file.',
        params => $params,
        returns => 'NodeumFileWithPath',
        };
}
# @return NodeumFileWithPath
#
sub show_file_by_task_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling show_file_by_task_execution");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling show_file_by_task_execution");
    }

    # parse inputs
    my $_resource_path = '/task_executions/{task_execution_id}/files/{file_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileWithPath', $response);
    return $_response_object;
}

#
# show_file_by_task_execution_by_task
#
# Displays a specific file.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $task_execution_id Numeric ID of task execution. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_file_by_task_execution_by_task' } = { 
        summary => 'Displays a specific file.',
        params => $params,
        returns => 'NodeumFileWithPath',
        };
}
# @return NodeumFileWithPath
#
sub show_file_by_task_execution_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling show_file_by_task_execution_by_task");
    }

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling show_file_by_task_execution_by_task");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling show_file_by_task_execution_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NodeumFileWithPath', $response);
    return $_response_object;
}

#
# show_import_file_by_pool
#
# Displays a specific file on tape of pools, specific for Data Exchange.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_import_file_by_pool' } = { 
        summary => 'Displays a specific file on tape of pools, specific for Data Exchange.',
        params => $params,
        returns => 'ImportFileWithPath',
        };
}
# @return ImportFileWithPath
#
sub show_import_file_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling show_import_file_by_pool");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling show_import_file_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/import_files/{file_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImportFileWithPath', $response);
    return $_response_object;
}

#
# show_on_tape_file_by_pool
#
# Displays a specific file on tape of pools, specific for Active and Offline.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $file_id Numeric ID of file. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'file_id' => {
        data_type => 'int',
        description => 'Numeric ID of file.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_on_tape_file_by_pool' } = { 
        summary => 'Displays a specific file on tape of pools, specific for Active and Offline.',
        params => $params,
        returns => 'OnTapesFile',
        };
}
# @return OnTapesFile
#
sub show_on_tape_file_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling show_on_tape_file_by_pool");
    }

    # verify the required parameter 'file_id' is set
    unless (exists $args{'file_id'}) {
      croak("Missing the required parameter 'file_id' when calling show_on_tape_file_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/on_tapes_files/{file_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'file_id'}) {
        my $_base_variable = "{" . "file_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'file_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OnTapesFile', $response);
    return $_response_object;
}

1;
