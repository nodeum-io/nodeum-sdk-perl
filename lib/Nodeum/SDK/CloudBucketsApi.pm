=begin comment

Nodeum API

The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Nodeum::SDK::CloudBucketsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Nodeum::SDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Nodeum::SDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Nodeum::SDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# index_cloud_buckets
#
# Lists all cloud buckets.
# 
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $cloud_connector_id Filter on cloud connector id (optional)
# @param string $pool_id Filter on a pool id (optional)
# @param string $name Filter on name (optional)
# @param string $location Filter on location (optional)
# @param string $price Filter on price (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'cloud_connector_id' => {
        data_type => 'string',
        description => 'Filter on cloud connector id',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => 'Filter on a pool id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Filter on location',
        required => '0',
    },
    'price' => {
        data_type => 'string',
        description => 'Filter on price',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cloud_buckets' } = { 
        summary => 'Lists all cloud buckets.',
        params => $params,
        returns => 'CloudBucketCollection',
        };
}
# @return CloudBucketCollection
#
sub index_cloud_buckets {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cloud_buckets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'cloud_connector_id'}) {
        $query_params->{'cloud_connector_id'} = $self->{api_client}->to_query_value($args{'cloud_connector_id'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'pool_id'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'price'}) {
        $query_params->{'price'} = $self->{api_client}->to_query_value($args{'price'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucketCollection', $response);
    return $_response_object;
}

#
# index_cloud_buckets_by_cloud_connector
#
# Lists all cloud buckets.
# 
# @param string $cloud_connector_id Numeric ID or name of cloud connector. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $pool_id Filter on a pool id (optional)
# @param string $name Filter on name (optional)
# @param string $location Filter on location (optional)
# @param string $price Filter on price (optional)
{
    my $params = {
    'cloud_connector_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud connector.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => 'Filter on a pool id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Filter on location',
        required => '0',
    },
    'price' => {
        data_type => 'string',
        description => 'Filter on price',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cloud_buckets_by_cloud_connector' } = { 
        summary => 'Lists all cloud buckets.',
        params => $params,
        returns => 'CloudBucketCollection',
        };
}
# @return CloudBucketCollection
#
sub index_cloud_buckets_by_cloud_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_connector_id' is set
    unless (exists $args{'cloud_connector_id'}) {
      croak("Missing the required parameter 'cloud_connector_id' when calling index_cloud_buckets_by_cloud_connector");
    }

    # parse inputs
    my $_resource_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'pool_id'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'price'}) {
        $query_params->{'price'} = $self->{api_client}->to_query_value($args{'price'});
    }

    # path params
    if ( exists $args{'cloud_connector_id'}) {
        my $_base_variable = "{" . "cloud_connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucketCollection', $response);
    return $_response_object;
}

#
# index_cloud_buckets_by_pool
#
# Lists all cloud buckets from pool.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $cloud_connector_id Filter on cloud connector id (optional)
# @param string $name Filter on name (optional)
# @param string $location Filter on location (optional)
# @param string $price Filter on price (optional)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'cloud_connector_id' => {
        data_type => 'string',
        description => 'Filter on cloud connector id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'location' => {
        data_type => 'string',
        description => 'Filter on location',
        required => '0',
    },
    'price' => {
        data_type => 'string',
        description => 'Filter on price',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_cloud_buckets_by_pool' } = { 
        summary => 'Lists all cloud buckets from pool.',
        params => $params,
        returns => 'CloudBucketCollection',
        };
}
# @return CloudBucketCollection
#
sub index_cloud_buckets_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling index_cloud_buckets_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/cloud_buckets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'cloud_connector_id'}) {
        $query_params->{'cloud_connector_id'} = $self->{api_client}->to_query_value($args{'cloud_connector_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    # query params
    if ( exists $args{'price'}) {
        $query_params->{'price'} = $self->{api_client}->to_query_value($args{'price'});
    }

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucketCollection', $response);
    return $_response_object;
}

#
# mount_status_cloud_bucket
#
# Get mount status of Cloud bucket.
# 
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
{
    my $params = {
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_cloud_bucket' } = { 
        summary => 'Get mount status of Cloud bucket.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_cloud_bucket {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling mount_status_cloud_bucket");
    }

    # parse inputs
    my $_resource_path = '/cloud_buckets/{cloud_bucket_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# mount_status_cloud_bucket_by_cloud_connector
#
# Get mount status of Cloud bucket.
# 
# @param string $cloud_connector_id Numeric ID or name of cloud connector. (required)
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
{
    my $params = {
    'cloud_connector_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud connector.',
        required => '1',
    },
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_cloud_bucket_by_cloud_connector' } = { 
        summary => 'Get mount status of Cloud bucket.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_cloud_bucket_by_cloud_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_connector_id' is set
    unless (exists $args{'cloud_connector_id'}) {
      croak("Missing the required parameter 'cloud_connector_id' when calling mount_status_cloud_bucket_by_cloud_connector");
    }

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling mount_status_cloud_bucket_by_cloud_connector");
    }

    # parse inputs
    my $_resource_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cloud_connector_id'}) {
        my $_base_variable = "{" . "cloud_connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# mount_status_cloud_bucket_by_pool
#
# Get mount status of Cloud bucket.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mount_status_cloud_bucket_by_pool' } = { 
        summary => 'Get mount status of Cloud bucket.',
        params => $params,
        returns => 'MountStatus',
        };
}
# @return MountStatus
#
sub mount_status_cloud_bucket_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling mount_status_cloud_bucket_by_pool");
    }

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling mount_status_cloud_bucket_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}/mount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MountStatus', $response);
    return $_response_object;
}

#
# show_cloud_bucket
#
# Displays a specific cloud bucket.
# 
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
{
    my $params = {
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_cloud_bucket' } = { 
        summary => 'Displays a specific cloud bucket.',
        params => $params,
        returns => 'CloudBucket',
        };
}
# @return CloudBucket
#
sub show_cloud_bucket {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling show_cloud_bucket");
    }

    # parse inputs
    my $_resource_path = '/cloud_buckets/{cloud_bucket_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucket', $response);
    return $_response_object;
}

#
# show_cloud_bucket_by_cloud_connector
#
# Displays a specific cloud bucket.
# 
# @param string $cloud_connector_id Numeric ID or name of cloud connector. (required)
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
{
    my $params = {
    'cloud_connector_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud connector.',
        required => '1',
    },
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_cloud_bucket_by_cloud_connector' } = { 
        summary => 'Displays a specific cloud bucket.',
        params => $params,
        returns => 'CloudBucket',
        };
}
# @return CloudBucket
#
sub show_cloud_bucket_by_cloud_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_connector_id' is set
    unless (exists $args{'cloud_connector_id'}) {
      croak("Missing the required parameter 'cloud_connector_id' when calling show_cloud_bucket_by_cloud_connector");
    }

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling show_cloud_bucket_by_cloud_connector");
    }

    # parse inputs
    my $_resource_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cloud_connector_id'}) {
        my $_base_variable = "{" . "cloud_connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucket', $response);
    return $_response_object;
}

#
# show_cloud_bucket_by_pool
#
# Displays a specific cloud bucket.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_cloud_bucket_by_pool' } = { 
        summary => 'Displays a specific cloud bucket.',
        params => $params,
        returns => 'CloudBucket',
        };
}
# @return CloudBucket
#
sub show_cloud_bucket_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling show_cloud_bucket_by_pool");
    }

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling show_cloud_bucket_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucket', $response);
    return $_response_object;
}

#
# sync_cloud_buckets
#
# Synchronize internal cloud buckets with their remote equivalent.
# 
# @param string $cloud_connector_id Numeric ID or name of cloud connector. (required)
{
    my $params = {
    'cloud_connector_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud connector.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sync_cloud_buckets' } = { 
        summary => 'Synchronize internal cloud buckets with their remote equivalent.',
        params => $params,
        returns => 'ActiveJobStatus',
        };
}
# @return ActiveJobStatus
#
sub sync_cloud_buckets {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_connector_id' is set
    unless (exists $args{'cloud_connector_id'}) {
      croak("Missing the required parameter 'cloud_connector_id' when calling sync_cloud_buckets");
    }

    # parse inputs
    my $_resource_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cloud_connector_id'}) {
        my $_base_variable = "{" . "cloud_connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ActiveJobStatus', $response);
    return $_response_object;
}

#
# sync_result_cloud_buckets
#
# Check result of cloud connector sync job.
# 
# @param string $cloud_connector_id Numeric ID or name of cloud connector. (required)
# @param string $job_id ID of active job (required)
{
    my $params = {
    'cloud_connector_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud connector.',
        required => '1',
    },
    'job_id' => {
        data_type => 'string',
        description => 'ID of active job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'sync_result_cloud_buckets' } = { 
        summary => 'Check result of cloud connector sync job.',
        params => $params,
        returns => 'CloudBucketSimpleCollection',
        };
}
# @return CloudBucketSimpleCollection
#
sub sync_result_cloud_buckets {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_connector_id' is set
    unless (exists $args{'cloud_connector_id'}) {
      croak("Missing the required parameter 'cloud_connector_id' when calling sync_result_cloud_buckets");
    }

    # verify the required parameter 'job_id' is set
    unless (exists $args{'job_id'}) {
      croak("Missing the required parameter 'job_id' when calling sync_result_cloud_buckets");
    }

    # parse inputs
    my $_resource_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'queued', 'working', 'failed', );
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'job_id'}) {
        $query_params->{'job_id'} = $self->{api_client}->to_query_value($args{'job_id'});
    }

    # path params
    if ( exists $args{'cloud_connector_id'}) {
        my $_base_variable = "{" . "cloud_connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucketSimpleCollection', $response);
    return $_response_object;
}

#
# update_cloud_bucket
#
# Updates a specific cloud bucket.
# 
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
# @param CloudBucket $cloud_bucket_body  (required)
{
    my $params = {
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    'cloud_bucket_body' => {
        data_type => 'CloudBucket',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_cloud_bucket' } = { 
        summary => 'Updates a specific cloud bucket.',
        params => $params,
        returns => 'CloudBucket',
        };
}
# @return CloudBucket
#
sub update_cloud_bucket {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling update_cloud_bucket");
    }

    # verify the required parameter 'cloud_bucket_body' is set
    unless (exists $args{'cloud_bucket_body'}) {
      croak("Missing the required parameter 'cloud_bucket_body' when calling update_cloud_bucket");
    }

    # parse inputs
    my $_resource_path = '/cloud_buckets/{cloud_bucket_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'cloud_bucket_body'}) {
        $_body_data = $args{'cloud_bucket_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucket', $response);
    return $_response_object;
}

#
# update_cloud_bucket_by_cloud_connector
#
# Updates a specific cloud bucket.
# 
# @param string $cloud_connector_id Numeric ID or name of cloud connector. (required)
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
# @param CloudBucket $cloud_bucket_body  (required)
{
    my $params = {
    'cloud_connector_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud connector.',
        required => '1',
    },
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    'cloud_bucket_body' => {
        data_type => 'CloudBucket',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_cloud_bucket_by_cloud_connector' } = { 
        summary => 'Updates a specific cloud bucket.',
        params => $params,
        returns => 'CloudBucket',
        };
}
# @return CloudBucket
#
sub update_cloud_bucket_by_cloud_connector {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_connector_id' is set
    unless (exists $args{'cloud_connector_id'}) {
      croak("Missing the required parameter 'cloud_connector_id' when calling update_cloud_bucket_by_cloud_connector");
    }

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling update_cloud_bucket_by_cloud_connector");
    }

    # verify the required parameter 'cloud_bucket_body' is set
    unless (exists $args{'cloud_bucket_body'}) {
      croak("Missing the required parameter 'cloud_bucket_body' when calling update_cloud_bucket_by_cloud_connector");
    }

    # parse inputs
    my $_resource_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'cloud_connector_id'}) {
        my $_base_variable = "{" . "cloud_connector_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_connector_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'cloud_bucket_body'}) {
        $_body_data = $args{'cloud_bucket_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucket', $response);
    return $_response_object;
}

#
# update_cloud_bucket_by_pool
#
# Updates a specific cloud bucket.
# 
# @param string $pool_id Numeric ID, or name of pool. (required)
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
# @param CloudBucket $cloud_bucket_body  (required)
{
    my $params = {
    'pool_id' => {
        data_type => 'string',
        description => 'Numeric ID, or name of pool.',
        required => '1',
    },
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    'cloud_bucket_body' => {
        data_type => 'CloudBucket',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_cloud_bucket_by_pool' } = { 
        summary => 'Updates a specific cloud bucket.',
        params => $params,
        returns => 'CloudBucket',
        };
}
# @return CloudBucket
#
sub update_cloud_bucket_by_pool {
    my ($self, %args) = @_;

    # verify the required parameter 'pool_id' is set
    unless (exists $args{'pool_id'}) {
      croak("Missing the required parameter 'pool_id' when calling update_cloud_bucket_by_pool");
    }

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling update_cloud_bucket_by_pool");
    }

    # verify the required parameter 'cloud_bucket_body' is set
    unless (exists $args{'cloud_bucket_body'}) {
      croak("Missing the required parameter 'cloud_bucket_body' when calling update_cloud_bucket_by_pool");
    }

    # parse inputs
    my $_resource_path = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pool_id'}) {
        my $_base_variable = "{" . "pool_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pool_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'cloud_bucket_body'}) {
        $_body_data = $args{'cloud_bucket_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CloudBucket', $response);
    return $_response_object;
}

#
# update_config_file_cloud_bucket
#
# Updates a specific cloud bucket.
# 
# @param string $cloud_bucket_id Numeric ID or name of cloud bucket. (required)
# @param string $config_file Config file to upload. (required)
{
    my $params = {
    'cloud_bucket_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of cloud bucket.',
        required => '1',
    },
    'config_file' => {
        data_type => 'string',
        description => 'Config file to upload.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_config_file_cloud_bucket' } = { 
        summary => 'Updates a specific cloud bucket.',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub update_config_file_cloud_bucket {
    my ($self, %args) = @_;

    # verify the required parameter 'cloud_bucket_id' is set
    unless (exists $args{'cloud_bucket_id'}) {
      croak("Missing the required parameter 'cloud_bucket_id' when calling update_config_file_cloud_bucket");
    }

    # verify the required parameter 'config_file' is set
    unless (exists $args{'config_file'}) {
      croak("Missing the required parameter 'config_file' when calling update_config_file_cloud_bucket");
    }

    # parse inputs
    my $_resource_path = '/cloud_buckets/{cloud_bucket_id}/config_file';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # path params
    if ( exists $args{'cloud_bucket_id'}) {
        my $_base_variable = "{" . "cloud_bucket_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cloud_bucket_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'config_file'} ) {
        $form_params->{'config_file'} = [] unless defined $form_params->{'config_file'};
        push @{$form_params->{'config_file'}}, $args{'config_file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
