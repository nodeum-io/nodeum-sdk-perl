=begin comment

Nodeum API

The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Nodeum::SDK::TaskExecutionsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Nodeum::SDK::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Nodeum::SDK::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Nodeum::SDK::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# index_task_executions
#
# Lists all task executions.
# 
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param boolean $complete_list If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)
# @param string $id Filter on id (optional)
# @param string $task_id Filter on task id (optional)
# @param string $name Filter on name (optional)
# @param string $workflow_type Filter on task workflow type (optional)
# @param string $workflow_action Filter on task workflow action (optional)
# @param string $source_type Filter on task source type (optional)
# @param string $destination_type Filter on task destination type (optional)
# @param string $status Filter on status (optional)
# @param string $log_time Filter on log time (optional)
# @param string $job_started Filter on job started (optional)
# @param string $job_finished Filter on job finished (optional)
# @param string $creation_date Filter on creation date (optional)
# @param string $modification_date Filter on modification date (optional)
# @param string $to_process_size Filter on to process size (optional)
# @param string $processed_size Filter on processed size (optional)
# @param string $to_process_files Filter on to process files (optional)
# @param string $processed_files Filter on processed files (optional)
# @param string $finalized_files Filter on finalized files (optional)
# @param string $estimation_time Filter on estimation time (optional)
# @param string $bandwidth Filter on bandwidth (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'complete_list' => {
        data_type => 'boolean',
        description => 'If &#x60;false&#x60;, only includes the last correct execution of a task.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'task_id' => {
        data_type => 'string',
        description => 'Filter on task id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'workflow_type' => {
        data_type => 'string',
        description => 'Filter on task workflow type',
        required => '0',
    },
    'workflow_action' => {
        data_type => 'string',
        description => 'Filter on task workflow action',
        required => '0',
    },
    'source_type' => {
        data_type => 'string',
        description => 'Filter on task source type',
        required => '0',
    },
    'destination_type' => {
        data_type => 'string',
        description => 'Filter on task destination type',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Filter on status',
        required => '0',
    },
    'log_time' => {
        data_type => 'string',
        description => 'Filter on log time',
        required => '0',
    },
    'job_started' => {
        data_type => 'string',
        description => 'Filter on job started',
        required => '0',
    },
    'job_finished' => {
        data_type => 'string',
        description => 'Filter on job finished',
        required => '0',
    },
    'creation_date' => {
        data_type => 'string',
        description => 'Filter on creation date',
        required => '0',
    },
    'modification_date' => {
        data_type => 'string',
        description => 'Filter on modification date',
        required => '0',
    },
    'to_process_size' => {
        data_type => 'string',
        description => 'Filter on to process size',
        required => '0',
    },
    'processed_size' => {
        data_type => 'string',
        description => 'Filter on processed size',
        required => '0',
    },
    'to_process_files' => {
        data_type => 'string',
        description => 'Filter on to process files',
        required => '0',
    },
    'processed_files' => {
        data_type => 'string',
        description => 'Filter on processed files',
        required => '0',
    },
    'finalized_files' => {
        data_type => 'string',
        description => 'Filter on finalized files',
        required => '0',
    },
    'estimation_time' => {
        data_type => 'string',
        description => 'Filter on estimation time',
        required => '0',
    },
    'bandwidth' => {
        data_type => 'string',
        description => 'Filter on bandwidth',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_task_executions' } = { 
        summary => 'Lists all task executions.',
        params => $params,
        returns => 'TaskExecutionCollection',
        };
}
# @return TaskExecutionCollection
#
sub index_task_executions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/task_executions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'complete_list'}) {
        $query_params->{'complete_list'} = $self->{api_client}->to_query_value($args{'complete_list'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'task_id'}) {
        $query_params->{'task_id'} = $self->{api_client}->to_query_value($args{'task_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'workflow_type'}) {
        $query_params->{'workflow_type'} = $self->{api_client}->to_query_value($args{'workflow_type'});
    }

    # query params
    if ( exists $args{'workflow_action'}) {
        $query_params->{'workflow_action'} = $self->{api_client}->to_query_value($args{'workflow_action'});
    }

    # query params
    if ( exists $args{'source_type'}) {
        $query_params->{'source_type'} = $self->{api_client}->to_query_value($args{'source_type'});
    }

    # query params
    if ( exists $args{'destination_type'}) {
        $query_params->{'destination_type'} = $self->{api_client}->to_query_value($args{'destination_type'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'log_time'}) {
        $query_params->{'log_time'} = $self->{api_client}->to_query_value($args{'log_time'});
    }

    # query params
    if ( exists $args{'job_started'}) {
        $query_params->{'job_started'} = $self->{api_client}->to_query_value($args{'job_started'});
    }

    # query params
    if ( exists $args{'job_finished'}) {
        $query_params->{'job_finished'} = $self->{api_client}->to_query_value($args{'job_finished'});
    }

    # query params
    if ( exists $args{'creation_date'}) {
        $query_params->{'creation_date'} = $self->{api_client}->to_query_value($args{'creation_date'});
    }

    # query params
    if ( exists $args{'modification_date'}) {
        $query_params->{'modification_date'} = $self->{api_client}->to_query_value($args{'modification_date'});
    }

    # query params
    if ( exists $args{'to_process_size'}) {
        $query_params->{'to_process_size'} = $self->{api_client}->to_query_value($args{'to_process_size'});
    }

    # query params
    if ( exists $args{'processed_size'}) {
        $query_params->{'processed_size'} = $self->{api_client}->to_query_value($args{'processed_size'});
    }

    # query params
    if ( exists $args{'to_process_files'}) {
        $query_params->{'to_process_files'} = $self->{api_client}->to_query_value($args{'to_process_files'});
    }

    # query params
    if ( exists $args{'processed_files'}) {
        $query_params->{'processed_files'} = $self->{api_client}->to_query_value($args{'processed_files'});
    }

    # query params
    if ( exists $args{'finalized_files'}) {
        $query_params->{'finalized_files'} = $self->{api_client}->to_query_value($args{'finalized_files'});
    }

    # query params
    if ( exists $args{'estimation_time'}) {
        $query_params->{'estimation_time'} = $self->{api_client}->to_query_value($args{'estimation_time'});
    }

    # query params
    if ( exists $args{'bandwidth'}) {
        $query_params->{'bandwidth'} = $self->{api_client}->to_query_value($args{'bandwidth'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskExecutionCollection', $response);
    return $_response_object;
}

#
# index_task_executions_by_task
#
# Lists all task executions.
# 
# @param string $task_id Filter on task id (optional)
# @param int $limit The number of items to display for pagination. (optional)
# @param int $offset The number of items to skip for pagination. (optional)
# @param ARRAY[string] $sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)
# @param string $id Filter on id (optional)
# @param string $name Filter on name (optional)
# @param string $workflow_type Filter on task workflow type (optional)
# @param string $workflow_action Filter on task workflow action (optional)
# @param string $source_type Filter on task source type (optional)
# @param string $destination_type Filter on task destination type (optional)
# @param string $status Filter on status (optional)
# @param string $log_time Filter on log time (optional)
# @param string $job_started Filter on job started (optional)
# @param string $job_finished Filter on job finished (optional)
# @param string $to_process_size Filter on to process size (optional)
# @param string $processed_size Filter on processed size (optional)
# @param string $to_process_files Filter on to process files (optional)
# @param string $processed_files Filter on processed files (optional)
# @param string $finalized_files Filter on finalized files (optional)
# @param string $estimation_time Filter on estimation time (optional)
# @param string $bandwidth Filter on bandwidth (optional)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Filter on task id',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of items to display for pagination.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of items to skip for pagination.',
        required => '0',
    },
    'sort_by' => {
        data_type => 'ARRAY[string]',
        description => 'Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Filter on id',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Filter on name',
        required => '0',
    },
    'workflow_type' => {
        data_type => 'string',
        description => 'Filter on task workflow type',
        required => '0',
    },
    'workflow_action' => {
        data_type => 'string',
        description => 'Filter on task workflow action',
        required => '0',
    },
    'source_type' => {
        data_type => 'string',
        description => 'Filter on task source type',
        required => '0',
    },
    'destination_type' => {
        data_type => 'string',
        description => 'Filter on task destination type',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Filter on status',
        required => '0',
    },
    'log_time' => {
        data_type => 'string',
        description => 'Filter on log time',
        required => '0',
    },
    'job_started' => {
        data_type => 'string',
        description => 'Filter on job started',
        required => '0',
    },
    'job_finished' => {
        data_type => 'string',
        description => 'Filter on job finished',
        required => '0',
    },
    'to_process_size' => {
        data_type => 'string',
        description => 'Filter on to process size',
        required => '0',
    },
    'processed_size' => {
        data_type => 'string',
        description => 'Filter on processed size',
        required => '0',
    },
    'to_process_files' => {
        data_type => 'string',
        description => 'Filter on to process files',
        required => '0',
    },
    'processed_files' => {
        data_type => 'string',
        description => 'Filter on processed files',
        required => '0',
    },
    'finalized_files' => {
        data_type => 'string',
        description => 'Filter on finalized files',
        required => '0',
    },
    'estimation_time' => {
        data_type => 'string',
        description => 'Filter on estimation time',
        required => '0',
    },
    'bandwidth' => {
        data_type => 'string',
        description => 'Filter on bandwidth',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'index_task_executions_by_task' } = { 
        summary => 'Lists all task executions.',
        params => $params,
        returns => 'TaskExecutionCollection',
        };
}
# @return TaskExecutionCollection
#
sub index_task_executions_by_task {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/task_executions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'task_id'}) {
        $query_params->{'task_id'} = $self->{api_client}->to_query_value($args{'task_id'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'workflow_type'}) {
        $query_params->{'workflow_type'} = $self->{api_client}->to_query_value($args{'workflow_type'});
    }

    # query params
    if ( exists $args{'workflow_action'}) {
        $query_params->{'workflow_action'} = $self->{api_client}->to_query_value($args{'workflow_action'});
    }

    # query params
    if ( exists $args{'source_type'}) {
        $query_params->{'source_type'} = $self->{api_client}->to_query_value($args{'source_type'});
    }

    # query params
    if ( exists $args{'destination_type'}) {
        $query_params->{'destination_type'} = $self->{api_client}->to_query_value($args{'destination_type'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'log_time'}) {
        $query_params->{'log_time'} = $self->{api_client}->to_query_value($args{'log_time'});
    }

    # query params
    if ( exists $args{'job_started'}) {
        $query_params->{'job_started'} = $self->{api_client}->to_query_value($args{'job_started'});
    }

    # query params
    if ( exists $args{'job_finished'}) {
        $query_params->{'job_finished'} = $self->{api_client}->to_query_value($args{'job_finished'});
    }

    # query params
    if ( exists $args{'to_process_size'}) {
        $query_params->{'to_process_size'} = $self->{api_client}->to_query_value($args{'to_process_size'});
    }

    # query params
    if ( exists $args{'processed_size'}) {
        $query_params->{'processed_size'} = $self->{api_client}->to_query_value($args{'processed_size'});
    }

    # query params
    if ( exists $args{'to_process_files'}) {
        $query_params->{'to_process_files'} = $self->{api_client}->to_query_value($args{'to_process_files'});
    }

    # query params
    if ( exists $args{'processed_files'}) {
        $query_params->{'processed_files'} = $self->{api_client}->to_query_value($args{'processed_files'});
    }

    # query params
    if ( exists $args{'finalized_files'}) {
        $query_params->{'finalized_files'} = $self->{api_client}->to_query_value($args{'finalized_files'});
    }

    # query params
    if ( exists $args{'estimation_time'}) {
        $query_params->{'estimation_time'} = $self->{api_client}->to_query_value($args{'estimation_time'});
    }

    # query params
    if ( exists $args{'bandwidth'}) {
        $query_params->{'bandwidth'} = $self->{api_client}->to_query_value($args{'bandwidth'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskExecutionCollection', $response);
    return $_response_object;
}

#
# show_task_execution
#
# Displays a specific task execution.
# 
# @param string $task_execution_id Numeric ID of task execution. (required)
{
    my $params = {
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_task_execution' } = { 
        summary => 'Displays a specific task execution.',
        params => $params,
        returns => 'TaskExecution',
        };
}
# @return TaskExecution
#
sub show_task_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling show_task_execution");
    }

    # parse inputs
    my $_resource_path = '/task_executions/{task_execution_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskExecution', $response);
    return $_response_object;
}

#
# show_task_execution_by_task
#
# Displays a specific task execution.
# 
# @param string $task_id Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID. (required)
# @param string $task_execution_id Numeric ID of task execution. (required)
{
    my $params = {
    'task_id' => {
        data_type => 'string',
        description => 'Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.',
        required => '1',
    },
    'task_execution_id' => {
        data_type => 'string',
        description => 'Numeric ID of task execution.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'show_task_execution_by_task' } = { 
        summary => 'Displays a specific task execution.',
        params => $params,
        returns => 'TaskExecution',
        };
}
# @return TaskExecution
#
sub show_task_execution_by_task {
    my ($self, %args) = @_;

    # verify the required parameter 'task_id' is set
    unless (exists $args{'task_id'}) {
      croak("Missing the required parameter 'task_id' when calling show_task_execution_by_task");
    }

    # verify the required parameter 'task_execution_id' is set
    unless (exists $args{'task_execution_id'}) {
      croak("Missing the required parameter 'task_execution_id' when calling show_task_execution_by_task");
    }

    # parse inputs
    my $_resource_path = '/tasks/{task_id}/task_executions/{task_execution_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'task_id'}) {
        my $_base_variable = "{" . "task_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'task_execution_id'}) {
        my $_base_variable = "{" . "task_execution_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'task_execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TaskExecution', $response);
    return $_response_object;
}

1;
